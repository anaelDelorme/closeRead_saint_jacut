[
  {
    "objectID": "premiere_carte.html",
    "href": "premiere_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection:   [\"53\"],\n    inverse: false\n})\n\n\n\n\n\n\nLes paysages de Bretagne sont d’abord les paysages d’un cap à l’extrémité occidentale de l’Eurasie, d’une avancée de terre dans l’océan Atlantique, des paysages de bout du monde. La découverte de ces paysages après de longues heures d’approche, comme leur fréquentation quotidienne à distance des centres continentaux, ne peut faire abstraction de cette position géographique sur la façade atlantique. Pour la Bretagne, la conscience d’être sur une péninsule est d’autant plus forte que le schéma est reproduit à différentes échelles, comme un emboîtement infini de caps, une déclinaison fractale du bout du monde.\n\nx_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([99225, 118203])\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([1242375, 403455])\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([6049646, 6691429])\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([7110480, 6892032])\n  .clamp(true)\n\n\n\nx_min = x_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\nx_max = x_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_min = y_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_max = y_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière qui a vu naître des personnalités aussi antinomiques qu’Anaël et François.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis.. \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\n\n\nmap = bertin.draw({\n  params: {\n    background: \"#bde1f0\",\n    projection: \"user\",\n    extent : [[x_min , y_min], [x_max, y_max]]\n  },\n\n  layers: [\n     {\n      id: \"mylayerid\",\n      type: \"layer\",\n      geojson: bretagne,\n      fill:  \"red\"\n      \n    },\n    \n    {\n      id: \"toto\",\n      type: \"layer\",\n      geojson: regs,\n      fill: \"orange\"\n      \n    },\n \n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`-----`\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "",
    "text": "Ah, Saint-Jacut-de-la-Mer… rien qu’à prononcer ce nom, voilà que surgissent les images de mon enfance, éclaboussées de lumière et de sel.\nC’est un village niché au creux des Côtes-d’Armor, une presqu’île presque irréelle, où la mer et la terre se chuchotent des secrets. Chaque été, nous nous y retrouvions, mon frère, mes parents et cette grande tribu de cousins et cousines qui faisait vibrer les rues et les plages de nos rires. Les journées semblaient infinies, partagées entre les jeux de carte sur la plage, les parties de babyfoot endiablées à la Frégate, et les longues heures passées à scruter l’horizon.\nEt cet horizon… il menait toujours à l’archipel des Ébihens, ce joyau sauvage que l’on atteignait à pied, à marée basse, comme si on franchissait la porte d’un autre monde. Aujourd’hui encore, c’est là que je retourne, avec mes propres enfants. Comme un passage de relais, comme un hommage à ce coin de paradis où le temps suspend son vol."
  },
  {
    "objectID": "index.html#à-la-découverte-dun-coin-de-paradis-breton",
    "href": "index.html#à-la-découverte-dun-coin-de-paradis-breton",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "À la découverte d’un coin de paradis breton",
    "text": "À la découverte d’un coin de paradis breton\n\nbertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"data/reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"data/dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"data/commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = crProgressBlock\n\n\n\n\n\n\nLa Bretagne, terre des anciens mystères et des horizons oubliés, se dresse telle une sentinelle à l’extrémité occidentale d’Eurasie, avançant hardiment son front de roc vers les eaux tumultueuses de l’Atlantique. Là-bas, à l’orée du monde, ses paysages s’étirent comme des murmures d’éternité.\nPour qui s’aventure jusqu’à ces contrées lointaines, après de longues traversées au gré des routes sinueuses, la Bretagne révèle son secret : elle n’est pas qu’une péninsule, mais un royaume d’emboîtements infinis, une danse fractale où chaque cap en cache un autre, où chaque promontoire semble chuchoter l’histoire des siècles.\nVoyageur, contemple ! Ces rivages ne sont pas de simples terres, mais des fragments du Grand Tissage. Ici, la géographie elle-même raconte l’épopée d’une terre façonnée par l’océan et le vent, une frontière entre l’ici et l’ailleurs, le connu et l’infini.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière, fief familiale d’Anaël et François , deux personnalités aussi antinomiques qu’attachantes.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis…\n\n\n\n\nUn département de légende, peuplé d’irréductibles Gaulois…\n\n\n\n\nEn avant vers les Côtes-d’Armor…\n\n\n\n\nOu plus précisément une presqu’île…\n\n\n\n\nA l’est du département, quasiment caché du reste du monde…\n\n\n\n\nFractale parmi les fractales, elle se cache pour mieux se découvrir…\n\n\n\n\n\nBienvenue à Saint-Jacut-de-la-Mer !\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: '#034159', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: '#038C3E', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: '#034159'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: '#034159', fill: 'lightgray'}),\n    Plot.geo(com, {fill: '#0CF25D', stroke: '#0CF25D', strokeWidth: 8, fillOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4  ),\n                   strokeOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4)}),\n    Plot.geo(bretagne, {fill: '#0CF25D', fillOpacity:  1-(progression)/.5})\n    \n  ]\n})"
  },
  {
    "objectID": "index.html#trésors-de-saint-jacut-de-la-mer",
    "href": "index.html#trésors-de-saint-jacut-de-la-mer",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Trésors de Saint-Jacut-de-la-Mer",
    "text": "Trésors de Saint-Jacut-de-la-Mer\n\n\n\n\nLa Banche : Le cœur animé de Saint-Jacut, avec ses maisons de pêcheurs et ses petites ruelles. On y sent l’âme du village.\n\n\n\n\nLe Port : Un havre tranquille où se balancent doucement les bateaux de plaisance et les coquilliers. Le départ idéal pour une escapade maritime.\n\n\n\n\nLe Camping : Un espace familial, à deux pas de la plage, où les générations se croisent, entre rires d’enfants et soirées sous les étoiles.\n\n\n\n\nLa plage du Rougeret : Une étendue de sable doré qui s’étire doucement, parfaite pour les balades pieds nus et les parties de pêche aux crabes. À marée basse, elle dévoile des trésors, à marée haute, elle invite à la baignade.\n\n\n\n\nLa Pointe du Chevet (Chef de l’île) : Un promontoire sauvage où les pins se courbent sous le vent, offrant une vue imprenable sur l’archipel des Ebihens. Un lieu pour rêver et respirer.\n\n\n\n\nL’île des Ébihens : Un archipel mystérieux, accessible seulement à marée basse, quand la mer se retire pour dévoiler son chemin secret. Là-bas, le monde change. On y trouve des plages de sable blanc, des sentiers bordés de pins et une sensation de bout du monde. C’est un lieu d’aventure et de contemplation, où l’on peut oublier le temps, bercé par le chant des vagues et le cri des mouettes."
  },
  {
    "objectID": "index.html#des-pépites-à-proximité",
    "href": "index.html#des-pépites-à-proximité",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Des pépites à proximité",
    "text": "Des pépites à proximité\n\n\n\n\n\nAutour de Saint-Jacut-de-la-Mer, à quelques battements d’ailes de mouette, se cachent des trésors qui donnent envie de prendre la route. Des lieux chargés de récits et de beautés, où l’histoire et la nature se rencontrent pour offrir des paysages à couper le souffle.\n\n\n\n\nSaint-Malo : La cité corsaire\nSaint-Malo, entourée par ses remparts, semble défier le temps et l’océan. Chaque ruelle murmure des récits de corsaires, tandis que le Fort National veille stoïquement. Flâner dans l’intra-muros, avec l’odeur du sel et des crêpes, c’est plonger dans une aventure gravée dans la pierre et le vent.\n\n\n\n\nCap Fréhel : L’appel du large\nAu Cap Fréhel, les falaises abruptes se jettent dans l’océan, caressées par le vent et habillées de bruyères. Depuis le phare, la vue est un miracle : mer infinie, Fort La Latte et ciel sans limite. Ici, tout invite à se sentir libre, porté par l’immensité.\n\n\n\n\nÎle de Bréhat : Le bijou des eaux\nL’île de Bréhat est un jardin posé sur la mer. Sans voitures, juste des sentiers fleuris, des criques paisibles et une lumière douce. Ici, le temps ralentit, laissant place à la poésie du silence et des vagues.\n\n\n\n\n\n\n\n\n\nImage\nNom\nDistance (km)\nNombre de touristes/an\nLien Google Maps\n\n\n\n\n\nDinard\n21 km\n800 000\nGoogle Maps\n\n\n\nSaint-Malo\n25 km\n1 500 000\nGoogle Maps\n\n\n\nFort National\n25 km\n300 000\nGoogle Maps\n\n\n\nErquy\n26 km\n250 000\nGoogle Maps\n\n\n\nFort La Latte\n31 km\n200 000\nGoogle Maps\n\n\n\nCap Fréhel\n34 km\n400 000\nGoogle Maps\n\n\n\nDinan\n36 km\n600 000\nGoogle Maps\n\n\n\nCancale\n46 km\n500 000\nGoogle Maps\n\n\n\nÎle de Bréhat\n74 km\n350 000\nGoogle Maps\n\n\n\nMont Saint-Michel\n79 km\n2 800 000\nGoogle Maps"
  },
  {
    "objectID": "index.html#météo",
    "href": "index.html#météo",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Météo",
    "text": "Météo\n\n\n\n\n\nLe matin, à Saint-Jacut, l’air est frais mais jamais vraiment mordant. En janvier, on frôle les 5°C, une douceur glacée qui fait toute la différence quand le soleil commence à peine à pointer.\nEn mai, la température monte un peu, autour de 10°C, mais c’est encore un matin calme, parfait pour une promenade au bord de l’eau.\nEt l’été arrive avec ses 15 à 17°C en juillet et août, offrant une belle douceur sans chaleur étouffante.\nEn novembre, la fraîcheur revient tout doucement, à 12°C, un peu de répit avant que l’hiver ne s’installe.\n\n\n\n\nL’après-midi, le temps se réchauffe doucement.\nEn hiver, la température monte à 10°C, ça reste agréable, pas trop de vent, juste assez pour se réchauffer au soleil.\nLe printemps, lui, offre une transition plus marquée, entre 10 et 15°C, et l’été, c’est le grand confort avec 20°C, juste ce qu’il faut pour profiter du ciel sans se brûler.\nPuis vient l’automne, qui ramène la température à 15°C, un air plus frais mais encore doux.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEt dans le temps\nLa Bretagne et ses légendes… Parmi elles, il y a celle d’une pluie incessante, comme si le ciel breton n’avait jamais appris à se reposer. On imagine souvent Saint-Jacut sous une bruine perpétuelle, les habitants avançant dans un décor où le soleil ne perce qu’en souvenir. Mais que disent les chiffres ? Car entre les fantasmes et la réalité, le ciel a bien des nuances à offrir.\n\n\n\n\nDevant nous, un graphique prêt à se dévoiler. Sur l’axe des abscisses, les années s’écoulent, de 2010 à aujourd’hui, et sur les deux axes verticaux, les précipitations en centimètres à gauche et le nombre de jours de pluie à droite.\n\n\n\n\nRegardez cette ligne rouge… Elle nous raconte une vérité connue : en Bretagne, il pleut souvent. Chaque jour ou presque, le ciel dépose ses gouttelettes sur les toits de Saint-Jacut. Si l’on compare à d’autres régions, on voit combien cette régularité est unique : à Perpignan, il pleut en moyenne 55 jours par an, soit moins de deux mois ! À Lyon, on atteint environ 95 jours de pluie annuels, presque un jour sur trois. Biarritz, avec ses influences océaniques, dépasse les 130 jours, mais Saint-Jacut, fidèle à sa réputation, flirte avec les 180 jours de pluie par an. Voilà un ciel breton bien généreux, pourrait-on dire.\n\n\n\n\nMaintenant, laissez votre regard glisser sur cette étendue bleue… Elle nous montre les précipitations en volume, ces eaux qui arrosent la terre et nourrissent les sols. Et là, les chiffres impressionnent. Saint-Jacut reçoit en moyenne entre 1 200 mm de pluie par an, ce qui la place derrière Biarritz, bien au-dessus de Lyon, avec ses 850 mm, et à des années-lumière de Perpignan, où l’on peine à atteindre 500 mm. Oui, il pleut souvent ici, mais rarement en trombes : ce sont des pluies régulières, modérées, qui forgent ce paysage unique.\n\n\n\n\nEnfin, voici cette ligne bleue qui descend doucement. Elle porte une vérité troublante : les précipitations diminuent au fil des années. Moins d’eau, moins de vie… Cela n’échappe à personne. Les terres bretonnes, si longtemps fertiles, commencent à souffrir. Les rivières, qui serpentent jusqu’à la mer, s’appauvrissent. Et pour la conchyliculture, qui dépend de l’eau douce pour équilibrer les estuaires, cette baisse est un coup dur.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlors que faire, face à ce ciel qui se dérobe ? Faut-il s’habituer à une Bretagne plus sèche, plus fragile ? Les sols, l’agriculture, et même la conchyliculture ne peuvent se passer de cette eau précieuse. Peut-être est-il temps de regarder plus sérieusement ces courbes et d’écouter leur message, car derrière ces chiffres, c’est une Bretagne en mutation qui se dessine…\n\n\n\nCréé par Anaël Delorme et François Semecurbe, bien aidés par ChatGPT et Claude.ai."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "formation.html",
    "href": "formation.html",
    "title": "Formation CloseRead",
    "section": "",
    "text": "Créer une première dataviz en datascrollytelling sur un thème qui vous tient à coeur.\n\n\n\nSelon votre niveau de connaissance en quarto/R/observable, vous pourrez vous arrêter en cours de formation. Mais vous aurez à toute étape un dataviz.\n\nStoryboard : Création du déroulé narratif de votre viz, avec création des textes et récupération des images/données utiles facile\nInitialisation : Création d’un document quarto et installation de closeread facile\nSquellette de la viz : Création de l’introduction/conclusion et des différentes parties de la dataviz facile\nScroll sur images : Intégration d’images et de textes, avec le scroll qui fait apparaitre le texte et l’image correspondante facile\nScroll sur du texte : Intégration de textes qui sera mis en évidence selon le scroll facile\nScroll sur un graphique en R : Création de graphique qui évoluera selon le scroll intermédiaire\nModification du thème : Changement de l’aspect de la dataviz en changeant le thème intermédiaire\nScroll sur des graphs ou cartes Javascript : Création de cartes qui évoluent avec le scroll avandé\nDéploiement sur Github Pages : Diffusion sur Internet avec Github Pages avandé\n\n\n\n\n\nAvoir accès à RStudio ou VSCode"
  },
  {
    "objectID": "formation.html#formation-closeread",
    "href": "formation.html#formation-closeread",
    "title": "Formation CloseRead",
    "section": "",
    "text": "Créer une première dataviz en datascrollytelling sur un thème qui vous tient à coeur.\n\n\n\nSelon votre niveau de connaissance en quarto/R/observable, vous pourrez vous arrêter en cours de formation. Mais vous aurez à toute étape un dataviz.\n\nStoryboard : Création du déroulé narratif de votre viz, avec création des textes et récupération des images/données utiles facile\nInitialisation : Création d’un document quarto et installation de closeread facile\nSquellette de la viz : Création de l’introduction/conclusion et des différentes parties de la dataviz facile\nScroll sur images : Intégration d’images et de textes, avec le scroll qui fait apparaitre le texte et l’image correspondante facile\nScroll sur du texte : Intégration de textes qui sera mis en évidence selon le scroll facile\nScroll sur un graphique en R : Création de graphique qui évoluera selon le scroll intermédiaire\nModification du thème : Changement de l’aspect de la dataviz en changeant le thème intermédiaire\nScroll sur des graphs ou cartes Javascript : Création de cartes qui évoluent avec le scroll avandé\nDéploiement sur Github Pages : Diffusion sur Internet avec Github Pages avandé\n\n\n\n\n\nAvoir accès à RStudio ou VSCode"
  },
  {
    "objectID": "formation.html#storyboard",
    "href": "formation.html#storyboard",
    "title": "Formation CloseRead",
    "section": "Storyboard",
    "text": "Storyboard"
  },
  {
    "objectID": "formation.html#initialisation-facile",
    "href": "formation.html#initialisation-facile",
    "title": "Formation CloseRead",
    "section": "Initialisation facile",
    "text": "Initialisation facile"
  },
  {
    "objectID": "formation.html#squellette-de-la-viz-facile",
    "href": "formation.html#squellette-de-la-viz-facile",
    "title": "Formation CloseRead",
    "section": "Squellette de la viz facile",
    "text": "Squellette de la viz facile"
  },
  {
    "objectID": "formation.html#scroll-sur-images-facile",
    "href": "formation.html#scroll-sur-images-facile",
    "title": "Formation CloseRead",
    "section": "Scroll sur images facile",
    "text": "Scroll sur images facile"
  },
  {
    "objectID": "formation.html#scroll-sur-du-texte-facile",
    "href": "formation.html#scroll-sur-du-texte-facile",
    "title": "Formation CloseRead",
    "section": "Scroll sur du texte facile",
    "text": "Scroll sur du texte facile"
  },
  {
    "objectID": "formation.html#scroll-sur-un-graphique-en-r-intermédiaire",
    "href": "formation.html#scroll-sur-un-graphique-en-r-intermédiaire",
    "title": "Formation CloseRead",
    "section": "Scroll sur un graphique en R intermédiaire",
    "text": "Scroll sur un graphique en R intermédiaire"
  },
  {
    "objectID": "formation.html#modification-du-thème-intermédiaire",
    "href": "formation.html#modification-du-thème-intermédiaire",
    "title": "Formation CloseRead",
    "section": "Modification du thème intermédiaire",
    "text": "Modification du thème intermédiaire"
  },
  {
    "objectID": "formation.html#scroll-sur-des-graphs-ou-cartes-javascript-avandé",
    "href": "formation.html#scroll-sur-des-graphs-ou-cartes-javascript-avandé",
    "title": "Formation CloseRead",
    "section": "Scroll sur des graphs ou cartes Javascript avandé",
    "text": "Scroll sur des graphs ou cartes Javascript avandé"
  },
  {
    "objectID": "formation.html#déploiement-sur-github-pages-avandé",
    "href": "formation.html#déploiement-sur-github-pages-avandé",
    "title": "Formation CloseRead",
    "section": "Déploiement sur Github Pages avandé",
    "text": "Déploiement sur Github Pages avandé"
  },
  {
    "objectID": "maps.html",
    "href": "maps.html",
    "title": "OJS Maps",
    "section": "",
    "text": "If you’ve seen the OJS Basics demo, you’ve seen ways that we can use scroll progress to make graphics that “animate” as the user scrolls.\nThat demo completely destroys and recreates the graphic continuously as the user scrolls, which works well for Observable Plot.\nBut many other JavaScript frameworks have animation capabilities built in, and if you want to leverage those capabilities, you may not be able to use this technique - any potential animation in them is lost the moment you destroy it.\nIn these cases, we initialise the map in one chunk of OJS code, then write the reactive bit — the part that ties it to our scroll progress — in a separate chunk.\n\nBertin.js\nBertin.js is a simple mapping library. You can absolutely use it as we do in the OJS Basics demo, replacing the map wholesale. But you can also use its update() function to change it\n\ncities = [\n  { name: \"Brisbane\",  lat: -27.467778, lon: 153.028056 },\n  { name: \"New Delhi\", lat: 28.613889,  lon: 77.208889 },\n  { name: \"Singapore\", lat: 1.283333,   lon: 103.833333 },\n  { name: \"Istanbul\",  lat: 41.013611,  lon: 28.955 },\n  { name: \"Paris\",     lat: 48.856667,  lon: 2.352222 },\n  { name: \"Nairobi\",   lat: -1.286389,  lon: 36.817222 },\n  { name: \"São Paulo\", lat: -23.55,     lon: -46.633333 },\n  { name: \"Montreal\",  lat: 45.508889,  lon: -73.554167 },\n  { name: \"Houston\",   lat: 29.762778,  lon: -95.383056 },\n  { name: \"Vancouver\", lat: 49.260833,  lon: -123.113889 },\n  { name: \"Honolulu\",  lat: 21.306944,  lom: -157.858333 }\n]\n\nworld = FileAttachment(\"naturalearth-land-110m.geojson\").json()\n\n// add a population column and convert to geojson\ncitiesGeo = bertin.table2geo(cities.map(d =&gt; ({...d, size: 3})))\n\nbertin = require(\"bertin@1.8\")\n\nL = require('leaflet@1.2.0')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\nNow we can update aspects of the map:\n\n// echo: true\nnewMap = {\n  const scrollColour = crTriggerIndex &gt;= 1 ?\n    \"royalblue\" : \"orangered\"\n\n  bertinMap.update({\n    id: \"city-layer\",\n    attr: \"fill\",\n    value: scrollColour,\n    duration: 1000\n  })\n}\n\n\n\n\n\n\n\n\n\n\nNotice that the map transitions between states instead of being replaced!\n\n\n\n\n\n\n\nbertinMap = bertin.draw({\n  params: { projection: d3.geoNaturalEarth1() },\n  layers: [\n    {\n      id: \"city-layer\",\n      type: \"bubble\",\n      geojson: citiesGeo,\n      values: \"size\",\n      k: 20,\n      fill: \"orangered\",\n\n      tooltip: [ \"$name\" ]\n    },\n    {\n      type: \"layer\",\n      geojson: world,\n      fill: \"#f5d482\"\n    },\n    { type: \"graticule\" },\n    { type: \"outline\" }\n  ]\n})\n\n\n\n\n\n\n\n\n\n\nNice! Let’s see if we can apply this to a slightly more complex example.\n\n\nLeaflet\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\n\n\n\n\n\nEssai\n\n\n\n\n\n\n\nmap = {\n  let container = DOM.element('div', { style: `height:180px;` });\n  yield container;\n  let map = L.map(container)\n    .setView([51.505, -0.09], 13);\n  let layer = L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt;'\n  })\n    .addTo(map);\n\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\nMapLibre\nLet’s try the technique out with MapLibre, an open fork of Mapbox GL JS.\n\n\nThis pattern will work just as well with Mapbox, as well as with most frameworks that let you call separate code to ‘update’ their graphics.\nMapLibre doesn’t require an API key the way Mapbox does, but it also doesn’t come with any tiles out of the box.\n\nr = require.alias({\n  maplibregl: \"maplibre-gl@2.1.9/dist/maplibre-gl.js\",\n  h3: {},\n  // deck: \"deck.gl@8.9.35/dist.min.js\"\n})\n\nmaplibregl = r(\"maplibregl\").catch(() =&gt; window[\"maplibregl\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToday we’ll use some demo tiles that MapLibre provides — they’re great for global or continental scale maps, but if you need to show more fine-grained stuff like streets, you might need to make your own tiles or look for a commercial service.\n\n\n\n\nFirstly, we’ll initialise our map. This has three steps:\n\nCreate a container for it\nInitialise the map itself\nWhen the map is ready, connect it back to OJS. This lets us use the map as an input if we want to do that\n\n\n\n\n\nNow that the map is ready, we can start to change it!\n\ntour = {\n  switch (crTriggerIndex) {\n    case 5:\n      scrollMap.flyTo({\n        // se australia\n        center: [147, -35],\n        zoom: 4\n      })\n      break\n    case 6:\n      scrollMap.flyTo({\n        // western usa\n        center: [-120, 42],\n        zoom: 4\n      })\n      break\n    default:\n      scrollMap.flyTo({\n        bounds: [[-175, -80], [175, 85]]\n      })\n  }\n}\n\n\n\n\n\n\n\n\n\n\nLet’s move the map to south-eastern Australia.\n\n\n\n\nAnd then to the west coast of the US!\n\n\n\n\nWe can modify any of the map’s methods — or even update a layer on the map, like filtering it or changing its colours.\n\n\n\n\n\n\n\nviewof scrollMap = {\n  \n  // set the space up for the map\n  // (note that you must currently manually size a full-bleed map!)\n  let container = html`&lt;div style=\"height: 100vh; width: 100vw;\"&gt;&lt;/div&gt;`\n  \n  /* you can also create an element for the map to appear where you\n     initialise it. this also requires some extra fiddling with size */\n  // let container = document.getElementById(\"cr-maplibre\")\n  \n  yield container\n  \n  // set the map up\n  let map = new maplibregl.Map({\n    container,\n    bounds: [[-175, -80], [175, 85]],\n    pitch: 30,\n    antialias: true,\n    style: \"style.json\",\n    interactive: false\n  })\n\n  map.on(\"load\", () =&gt; {\n    container.value = map\n    container.dispatchEvent(new CustomEvent(\"input\"))\n\n    // if your map has layers, create them separately and\n    // call `map.addLayer()` here!\n  })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`"
  },
  {
    "objectID": "carte_closeread-main/troisieme_carte.html",
    "href": "carte_closeread-main/troisieme_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = crProgressBlock\n\n\n\n\n\n\nAh, la Bretagne ! Terre des anciens mystères et des horizons oubliés, elle se dresse telle une sentinelle à l’extrémité occidentale d’Eurasie, avançant hardiment son front de roc vers les eaux tumultueuses de l’Atlantique. Là-bas, à l’orée du monde, ses paysages s’étirent comme des murmures d’éternité.\nPour qui s’aventure jusqu’à ces contrées lointaines, après de longues traversées au gré des routes sinueuses, la Bretagne révèle son secret : elle n’est pas qu’une péninsule, mais un royaume d’emboîtements infinis, une danse fractale où chaque cap en cache un autre, où chaque promontoire semble chuchoter l’histoire des siècles.\nVoyageur, contemple ! Ces rivages ne sont pas de simples terres, mais des fragments du Grand Tissage. Ici, la géographie elle-même raconte l’épopée d’une terre façonnée par l’océan et le vent, une frontière entre l’ici et l’ailleurs, le connu et l’infini.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière, fief familiale d’Anaël et François , deux personnalités aussi antinomiques qu’attachantes.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis..\n\n\n\n\nUn département de légende, peuplé d’irréductibles Gaulois\n\n\n\n\nEn avant vers les Côtes-d’Armor\n\n\n\n\nOu plus précisément une presqu’île…\n\n\n\n\nA l’est du département, quasiment caché du reste du monde…\n\n\n\n\nFractale parmi les fractales, elle se cache pour mieux se découvrir…\n\n\n\n\n\nBienvenue à Saint-Jacut-de-la-Mer\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: 'blue', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: 'green', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: 'gray'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: 'gray', fill: 'lightgray'}),\n    Plot.geo(com, {fill: 'red', stroke: 'red', strokeWidth: 6, fillOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4  ),\n                   strokeOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4)}),\n    Plot.geo(bretagne, {fill: 'orange', fillOpacity:  1-(progression)/.5})\n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "carte_closeread-main/premiere_carte.html",
    "href": "carte_closeread-main/premiere_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection:   [\"53\"],\n    inverse: false\n})\n\n\n\n\n\n\nLes paysages de Bretagne sont d’abord les paysages d’un cap à l’extrémité occidentale de l’Eurasie, d’une avancée de terre dans l’océan Atlantique, des paysages de bout du monde. La découverte de ces paysages après de longues heures d’approche, comme leur fréquentation quotidienne à distance des centres continentaux, ne peut faire abstraction de cette position géographique sur la façade atlantique. Pour la Bretagne, la conscience d’être sur une péninsule est d’autant plus forte que le schéma est reproduit à différentes échelles, comme un emboîtement infini de caps, une déclinaison fractale du bout du monde.\n\nx_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([99225, 118203])\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([1242375, 403455])\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([6049646, 6691429])\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([7110480, 6892032])\n  .clamp(true)\n\n\n\nx_min = x_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\nx_max = x_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_min = y_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_max = y_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière qui a vu naître des personnalités aussi antinomiques qu’Anaël et François.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis.. \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\n\n\nmap = bertin.draw({\n  params: {\n    background: \"#bde1f0\",\n    projection: \"user\",\n    extent : [[x_min , y_min], [x_max, y_max]]\n  },\n\n  layers: [\n     {\n      id: \"mylayerid\",\n      type: \"layer\",\n      geojson: bretagne,\n      fill:  \"red\"\n      \n    },\n    \n    {\n      id: \"toto\",\n      type: \"layer\",\n      geojson: regs,\n      fill: \"orange\"\n      \n    },\n \n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`-----`\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "carte_closeread-main/deuxieme_carte.html",
    "href": "carte_closeread-main/deuxieme_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = (crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress\n\n\n\n\n\n\nAh, la Bretagne ! Terre des anciens mystères et des horizons oubliés, elle se dresse telle une sentinelle à l’extrémité occidentale d’Eurasie, avançant hardiment son front de roc vers les eaux tumultueuses de l’Atlantique. Là-bas, à l’orée du monde, ses paysages s’étirent comme des murmures d’éternité.\nPour qui s’aventure jusqu’à ces contrées lointaines, après de longues traversées au gré des routes sinueuses, la Bretagne révèle son secret : elle n’est pas qu’une péninsule, mais un royaume d’emboîtements infinis, une danse fractale où chaque cap en cache un autre, où chaque promontoire semble chuchoter l’histoire des siècles.\nVoyageur, contemple ! Ces rivages ne sont pas de simples terres, mais des fragments du Grand Tissage. Ici, la géographie elle-même raconte l’épopée d’une terre façonnée par l’océan et le vent, une frontière entre l’ici et l’ailleurs, le connu et l’infini.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière, fief familiale d’Anaël et François, deux personnalités aussi antinomiques qu’attachantes.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis..\n\n\n\n\nUn département de légende, peuplé d’irréductibles Gaulois\n\n\n\n\nEn avant vers les Côtes-d’Armor\n\n\n\n\nOu plus précisément une presqu’île…\n\n\n\n\nA l’est du département, quasiment caché du reste du monde…\n\n\n\n\nFractale parmi les fractales, elle se cache pour mieux se découvrir…\n\n\n\n\n\nBienvenue à Saint-Jacut-de-la-Mer\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: 'blue', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: 'green', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: 'gray'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: 'gray', fill: 'lightgray'}),\n    Plot.geo(com, {fill: 'red', stroke: 'red', strokeWidth: 6, fillOpacity: (progression&lt;6 ? 0 : progression  )/8,\n                   strokeOpacity: (progression&lt;6 ? 0 : progression)/8,}),\n    Plot.geo(bretagne, {fill: 'orange', fillOpacity:  1-(progression)/4})\n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "carte_closeread-main/maps.html",
    "href": "carte_closeread-main/maps.html",
    "title": "OJS Maps",
    "section": "",
    "text": "If you’ve seen the OJS Basics demo, you’ve seen ways that we can use scroll progress to make graphics that “animate” as the user scrolls.\nThat demo completely destroys and recreates the graphic continuously as the user scrolls, which works well for Observable Plot.\nBut many other JavaScript frameworks have animation capabilities built in, and if you want to leverage those capabilities, you may not be able to use this technique - any potential animation in them is lost the moment you destroy it.\nIn these cases, we initialise the map in one chunk of OJS code, then write the reactive bit — the part that ties it to our scroll progress — in a separate chunk.\n\nBertin.js\nBertin.js is a simple mapping library. You can absolutely use it as we do in the OJS Basics demo, replacing the map wholesale. But you can also use its update() function to change it\n\ncities = [\n  { name: \"Brisbane\",  lat: -27.467778, lon: 153.028056 },\n  { name: \"New Delhi\", lat: 28.613889,  lon: 77.208889 },\n  { name: \"Singapore\", lat: 1.283333,   lon: 103.833333 },\n  { name: \"Istanbul\",  lat: 41.013611,  lon: 28.955 },\n  { name: \"Paris\",     lat: 48.856667,  lon: 2.352222 },\n  { name: \"Nairobi\",   lat: -1.286389,  lon: 36.817222 },\n  { name: \"São Paulo\", lat: -23.55,     lon: -46.633333 },\n  { name: \"Montreal\",  lat: 45.508889,  lon: -73.554167 },\n  { name: \"Houston\",   lat: 29.762778,  lon: -95.383056 },\n  { name: \"Vancouver\", lat: 49.260833,  lon: -123.113889 },\n  { name: \"Honolulu\",  lat: 21.306944,  lom: -157.858333 }\n]\n\nworld = FileAttachment(\"naturalearth-land-110m.geojson\").json()\n\n// add a population column and convert to geojson\ncitiesGeo = bertin.table2geo(cities.map(d =&gt; ({...d, size: 3})))\n\nbertin = require(\"bertin@1.8\")\n\nL = require('leaflet@1.2.0')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\nNow we can update aspects of the map:\n\n// echo: true\nnewMap = {\n  const scrollColour = crTriggerIndex &gt;= 1 ?\n    \"royalblue\" : \"orangered\"\n\n  bertinMap.update({\n    id: \"city-layer\",\n    attr: \"fill\",\n    value: scrollColour,\n    duration: 1000\n  })\n}\n\n\n\n\n\n\n\n\n\n\nNotice that the map transitions between states instead of being replaced!\n\n\n\n\n\n\n\nbertinMap = bertin.draw({\n  params: { projection: d3.geoNaturalEarth1() },\n  layers: [\n    {\n      id: \"city-layer\",\n      type: \"bubble\",\n      geojson: citiesGeo,\n      values: \"size\",\n      k: 20,\n      fill: \"orangered\",\n\n      tooltip: [ \"$name\" ]\n    },\n    {\n      type: \"layer\",\n      geojson: world,\n      fill: \"#f5d482\"\n    },\n    { type: \"graticule\" },\n    { type: \"outline\" }\n  ]\n})\n\n\n\n\n\n\n\n\n\n\nNice! Let’s see if we can apply this to a slightly more complex example.\n\n\nLeaflet\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\n\n\n\n\n\nEssai\n\n\n\n\n\n\n\nmap = {\n  let container = DOM.element('div', { style: `height:180px;` });\n  yield container;\n  let map = L.map(container)\n    .setView([51.505, -0.09], 13);\n  let layer = L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt;'\n  })\n    .addTo(map);\n\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\nMapLibre\nLet’s try the technique out with MapLibre, an open fork of Mapbox GL JS.\n\n\nThis pattern will work just as well with Mapbox, as well as with most frameworks that let you call separate code to ‘update’ their graphics.\nMapLibre doesn’t require an API key the way Mapbox does, but it also doesn’t come with any tiles out of the box.\n\nr = require.alias({\n  maplibregl: \"maplibre-gl@2.1.9/dist/maplibre-gl.js\",\n  h3: {},\n  // deck: \"deck.gl@8.9.35/dist.min.js\"\n})\n\nmaplibregl = r(\"maplibregl\").catch(() =&gt; window[\"maplibregl\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToday we’ll use some demo tiles that MapLibre provides — they’re great for global or continental scale maps, but if you need to show more fine-grained stuff like streets, you might need to make your own tiles or look for a commercial service.\n\n\n\n\nFirstly, we’ll initialise our map. This has three steps:\n\nCreate a container for it\nInitialise the map itself\nWhen the map is ready, connect it back to OJS. This lets us use the map as an input if we want to do that\n\n\n\n\n\nNow that the map is ready, we can start to change it!\n\ntour = {\n  switch (crTriggerIndex) {\n    case 5:\n      scrollMap.flyTo({\n        // se australia\n        center: [147, -35],\n        zoom: 4\n      })\n      break\n    case 6:\n      scrollMap.flyTo({\n        // western usa\n        center: [-120, 42],\n        zoom: 4\n      })\n      break\n    default:\n      scrollMap.flyTo({\n        bounds: [[-175, -80], [175, 85]]\n      })\n  }\n}\n\n\n\n\n\n\n\n\n\n\nLet’s move the map to south-eastern Australia.\n\n\n\n\nAnd then to the west coast of the US!\n\n\n\n\nWe can modify any of the map’s methods — or even update a layer on the map, like filtering it or changing its colours.\n\n\n\n\n\n\n\nviewof scrollMap = {\n  \n  // set the space up for the map\n  // (note that you must currently manually size a full-bleed map!)\n  let container = html`&lt;div style=\"height: 100vh; width: 100vw;\"&gt;&lt;/div&gt;`\n  \n  /* you can also create an element for the map to appear where you\n     initialise it. this also requires some extra fiddling with size */\n  // let container = document.getElementById(\"cr-maplibre\")\n  \n  yield container\n  \n  // set the map up\n  let map = new maplibregl.Map({\n    container,\n    bounds: [[-175, -80], [175, 85]],\n    pitch: 30,\n    antialias: true,\n    style: \"style.json\",\n    interactive: false\n  })\n\n  map.on(\"load\", () =&gt; {\n    container.value = map\n    container.dispatchEvent(new CustomEvent(\"input\"))\n\n    // if your map has layers, create them separately and\n    // call `map.addLayer()` here!\n  })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`"
  },
  {
    "objectID": "carte_closeread-main/about.html",
    "href": "carte_closeread-main/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n[1] 2"
  }
]