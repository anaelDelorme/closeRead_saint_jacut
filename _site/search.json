[
  {
    "objectID": "premiere_carte.html",
    "href": "premiere_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection:   [\"53\"],\n    inverse: false\n})\n\n\n\n\n\n\nLes paysages de Bretagne sont d’abord les paysages d’un cap à l’extrémité occidentale de l’Eurasie, d’une avancée de terre dans l’océan Atlantique, des paysages de bout du monde. La découverte de ces paysages après de longues heures d’approche, comme leur fréquentation quotidienne à distance des centres continentaux, ne peut faire abstraction de cette position géographique sur la façade atlantique. Pour la Bretagne, la conscience d’être sur une péninsule est d’autant plus forte que le schéma est reproduit à différentes échelles, comme un emboîtement infini de caps, une déclinaison fractale du bout du monde.\n\nx_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([99225, 118203])\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([1242375, 403455])\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([6049646, 6691429])\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([7110480, 6892032])\n  .clamp(true)\n\n\n\nx_min = x_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\nx_max = x_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_min = y_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_max = y_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière qui a vu naître des personnalités aussi antinomiques qu’Anaël et François.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis.. \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\n\n\nmap = bertin.draw({\n  params: {\n    background: \"#bde1f0\",\n    projection: \"user\",\n    extent : [[x_min , y_min], [x_max, y_max]]\n  },\n\n  layers: [\n     {\n      id: \"mylayerid\",\n      type: \"layer\",\n      geojson: bretagne,\n      fill:  \"red\"\n      \n    },\n    \n    {\n      id: \"toto\",\n      type: \"layer\",\n      geojson: regs,\n      fill: \"orange\"\n      \n    },\n \n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`-----`\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "",
    "text": "Ah, Saint-Jacut-de-la-Mer… rien qu’à prononcer ce nom, voilà que surgissent les images de mon enfance, éclaboussées de lumière et de sel.\nC’est un village niché au creux des Côtes-d’Armor, une presqu’île presque irréelle, où la mer et la terre se chuchotent des secrets. Chaque été, nous nous y retrouvions, mon frère, mes parents et cette grande tribu de cousins et cousines qui faisait vibrer les rues et les plages de nos rires. Les journées semblaient infinies, partagées entre les jeux de carte sur la plage, les parties de babyfoot endiablées à la Frégate, et les longues heures passées à scruter l’horizon.\nEt cet horizon… il menait toujours à l’archipel des Ébihens, ce joyau sauvage que l’on atteignait à pied, à marée basse, comme si on franchissait la porte d’un autre monde. Aujourd’hui encore, c’est là que je retourne, avec mes propres enfants. Comme un passage de relais, comme un hommage à ce coin de paradis où le temps suspend son vol."
  },
  {
    "objectID": "index.html#à-la-découverte-dun-coin-de-paradis-breton",
    "href": "index.html#à-la-découverte-dun-coin-de-paradis-breton",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "À la découverte d’un coin de paradis breton",
    "text": "À la découverte d’un coin de paradis breton\n\nbertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"data/reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"data/dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"data/commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = crProgressBlock\n\n\n\n\n\n\nLa Bretagne, terre des anciens mystères et des horizons oubliés, se dresse telle une sentinelle à l’extrémité occidentale d’Eurasie, avançant hardiment son front de roc vers les eaux tumultueuses de l’Atlantique. Là-bas, à l’orée du monde, ses paysages s’étirent comme des murmures d’éternité.\nPour qui s’aventure jusqu’à ces contrées lointaines, après de longues traversées au gré des routes sinueuses, la Bretagne révèle son secret : elle n’est pas qu’une péninsule, mais un royaume d’emboîtements infinis, une danse fractale où chaque cap en cache un autre, où chaque promontoire semble chuchoter l’histoire des siècles.\nVoyageur, contemple ! Ces rivages ne sont pas de simples terres, mais des fragments du Grand Tissage. Ici, la géographie elle-même raconte l’épopée d’une terre façonnée par l’océan et le vent, une frontière entre l’ici et l’ailleurs, le connu et l’infini.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière, fief familiale d’Anaël et François , deux personnalités aussi antinomiques qu’attachantes.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis…\n\n\n\n\nUn département de légende, peuplé d’irréductibles Gaulois…\n\n\n\n\nEn avant vers les Côtes-d’Armor…\n\n\n\n\nOu plus précisément une presqu’île…\n\n\n\n\nA l’est du département, quasiment caché du reste du monde…\n\n\n\n\nFractale parmi les fractales, elle se cache pour mieux se découvrir…\n\n\n\n\n\nBienvenue à Saint-Jacut-de-la-Mer !\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: '#034159', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: '#038C3E', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: '#034159'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: '#034159', fill: 'lightgray'}),\n    Plot.geo(com, {fill: '#0CF25D', stroke: '#0CF25D', strokeWidth: 8, fillOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4  ),\n                   strokeOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4)}),\n    Plot.geo(bretagne, {fill: '#0CF25D', fillOpacity:  1-(progression)/.5})\n    \n  ]\n})"
  },
  {
    "objectID": "index.html#trésors-de-saint-jacut-de-la-mer",
    "href": "index.html#trésors-de-saint-jacut-de-la-mer",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Trésors de Saint-Jacut-de-la-Mer",
    "text": "Trésors de Saint-Jacut-de-la-Mer\n\n\n\n\nLa Banche : Le cœur animé de Saint-Jacut, avec ses maisons de pêcheurs et ses petites ruelles. On y sent l’âme du village.\n\n\n\n\nLe Port : Un havre tranquille où se balancent doucement les bateaux de plaisance et les coquilliers. Le départ idéal pour une escapade maritime.\n\n\n\n\nLe Camping : Un espace familial, à deux pas de la plage, où les générations se croisent, entre rires d’enfants et soirées sous les étoiles.\n\n\n\n\nLa plage du Rougeret : Une étendue de sable doré qui s’étire doucement, parfaite pour les balades pieds nus et les parties de pêche aux crabes. À marée basse, elle dévoile des trésors, à marée haute, elle invite à la baignade.\n\n\n\n\nLa Pointe du Chevet (Chef de l’île) : Un promontoire sauvage où les pins se courbent sous le vent, offrant une vue imprenable sur l’archipel des Ebihens. Un lieu pour rêver et respirer.\n\n\n\n\nL’île des Ébihens : Un archipel mystérieux, accessible seulement à marée basse, quand la mer se retire pour dévoiler son chemin secret. Là-bas, le monde change. On y trouve des plages de sable blanc, des sentiers bordés de pins et une sensation de bout du monde. C’est un lieu d’aventure et de contemplation, où l’on peut oublier le temps, bercé par le chant des vagues et le cri des mouettes."
  },
  {
    "objectID": "index.html#des-pépites-à-proximité",
    "href": "index.html#des-pépites-à-proximité",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Des pépites à proximité",
    "text": "Des pépites à proximité\n\n\n\n\n\nAutour de Saint-Jacut-de-la-Mer, à quelques battements d’ailes de mouette, se cachent des trésors qui donnent envie de prendre la route. Des lieux chargés de récits et de beautés, où l’histoire et la nature se rencontrent pour offrir des paysages à couper le souffle.\n\n\n\n\nSaint-Malo : La cité corsaire\nSaint-Malo, entourée par ses remparts, semble défier le temps et l’océan. Chaque ruelle murmure des récits de corsaires, tandis que le Fort National veille stoïquement. Flâner dans l’intra-muros, avec l’odeur du sel et des crêpes, c’est plonger dans une aventure gravée dans la pierre et le vent.\n\n\n\n\nCap Fréhel : L’appel du large\nAu Cap Fréhel, les falaises abruptes se jettent dans l’océan, caressées par le vent et habillées de bruyères. Depuis le phare, la vue est un miracle : mer infinie, Fort La Latte et ciel sans limite. Ici, tout invite à se sentir libre, porté par l’immensité.\n\n\n\n\nÎle de Bréhat : Le bijou des eaux\nL’île de Bréhat est un jardin posé sur la mer. Sans voitures, juste des sentiers fleuris, des criques paisibles et une lumière douce. Ici, le temps ralentit, laissant place à la poésie du silence et des vagues.\n\n\n\n\n\n\n\n\n\nImage\nNom\nDistance (km)\nNombre de touristes/an\nLien Google Maps\n\n\n\n\n\nDinard\n21 km\n800 000\nGoogle Maps\n\n\n\nSaint-Malo\n25 km\n1 500 000\nGoogle Maps\n\n\n\nFort National\n25 km\n300 000\nGoogle Maps\n\n\n\nErquy\n26 km\n250 000\nGoogle Maps\n\n\n\nFort La Latte\n31 km\n200 000\nGoogle Maps\n\n\n\nCap Fréhel\n34 km\n400 000\nGoogle Maps\n\n\n\nDinan\n36 km\n600 000\nGoogle Maps\n\n\n\nCancale\n46 km\n500 000\nGoogle Maps\n\n\n\nÎle de Bréhat\n74 km\n350 000\nGoogle Maps\n\n\n\nMont Saint-Michel\n79 km\n2 800 000\nGoogle Maps"
  },
  {
    "objectID": "index.html#météo",
    "href": "index.html#météo",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Météo",
    "text": "Météo\n\n\n\n\n\nLe matin, à Saint-Jacut, l’air est frais mais jamais vraiment mordant. En janvier, on frôle les 5°C, une douceur glacée qui fait toute la différence quand le soleil commence à peine à pointer.\nEn mai, la température monte un peu, autour de 10°C, mais c’est encore un matin calme, parfait pour une promenade au bord de l’eau.\nEt l’été arrive avec ses 15 à 17°C en juillet et août, offrant une belle douceur sans chaleur étouffante.\nEn novembre, la fraîcheur revient tout doucement, à 12°C, un peu de répit avant que l’hiver ne s’installe.\n\n\n\n\nL’après-midi, le temps se réchauffe doucement.\nEn hiver, la température monte à 10°C, ça reste agréable, pas trop de vent, juste assez pour se réchauffer au soleil.\nLe printemps, lui, offre une transition plus marquée, entre 10 et 15°C, et l’été, c’est le grand confort avec 20°C, juste ce qu’il faut pour profiter du ciel sans se brûler.\nPuis vient l’automne, qui ramène la température à 15°C, un air plus frais mais encore doux.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEt dans le temps\nLa Bretagne et ses légendes… Parmi elles, il y a celle d’une pluie incessante, comme si le ciel breton n’avait jamais appris à se reposer. On imagine souvent Saint-Jacut sous une bruine perpétuelle, les habitants avançant dans un décor où le soleil ne perce qu’en souvenir. Mais que disent les chiffres ? Car entre les fantasmes et la réalité, le ciel a bien des nuances à offrir.\n\n\n\n\nDevant nous, un graphique prêt à se dévoiler. Sur l’axe des abscisses, les années s’écoulent, de 2010 à aujourd’hui, et sur les deux axes verticaux, les précipitations en centimètres à gauche et le nombre de jours de pluie à droite.\n\n\n\n\nRegardez cette ligne rouge… Elle nous raconte une vérité connue : en Bretagne, il pleut souvent. Chaque jour ou presque, le ciel dépose ses gouttelettes sur les toits de Saint-Jacut. Si l’on compare à d’autres régions, on voit combien cette régularité est unique : à Perpignan, il pleut en moyenne 55 jours par an, soit moins de deux mois ! À Lyon, on atteint environ 95 jours de pluie annuels, presque un jour sur trois. Biarritz, avec ses influences océaniques, dépasse les 130 jours, mais Saint-Jacut, fidèle à sa réputation, flirte avec les 180 jours de pluie par an. Voilà un ciel breton bien généreux, pourrait-on dire.\n\n\n\n\nMaintenant, laissez votre regard glisser sur cette étendue bleue… Elle nous montre les précipitations en volume, ces eaux qui arrosent la terre et nourrissent les sols. Et là, les chiffres impressionnent. Saint-Jacut reçoit en moyenne entre 1 200 mm de pluie par an, ce qui la place derrière Biarritz, bien au-dessus de Lyon, avec ses 850 mm, et à des années-lumière de Perpignan, où l’on peine à atteindre 500 mm. Oui, il pleut souvent ici, mais rarement en trombes : ce sont des pluies régulières, modérées, qui forgent ce paysage unique.\n\n\n\n\nEnfin, voici cette ligne bleue qui descend doucement. Elle porte une vérité troublante : les précipitations diminuent au fil des années. Moins d’eau, moins de vie… Cela n’échappe à personne. Les terres bretonnes, si longtemps fertiles, commencent à souffrir. Les rivières, qui serpentent jusqu’à la mer, s’appauvrissent. Et pour la conchyliculture, qui dépend de l’eau douce pour équilibrer les estuaires, cette baisse est un coup dur.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAlors que faire, face à ce ciel qui se dérobe ? Faut-il s’habituer à une Bretagne plus sèche, plus fragile ? Les sols, l’agriculture, et même la conchyliculture ne peuvent se passer de cette eau précieuse. Peut-être est-il temps de regarder plus sérieusement ces courbes et d’écouter leur message, car derrière ces chiffres, c’est une Bretagne en mutation qui se dessine…\n\n\n\nCréé par Anaël Delorme et François Semecurbe, bien aidés par ChatGPT et Claude.ai."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "formation.html",
    "href": "formation.html",
    "title": "Formation CloseRead",
    "section": "",
    "text": "Créer une première dataviz en datascrollytelling sur un thème qui vous tient à coeur.\n\n\n\nSelon votre niveau de connaissance en quarto/R/observable, vous pourrez vous arrêter en cours de formation. Mais vous aurez à toute étape une dataviz.\n\nStoryboard : Création du déroulé narratif de votre viz, avec création des textes et récupération des images/données utiles facile\nInitialisation : Création d’un document quarto et installation de closeread facile\nSquellette de la viz : Création de l’introduction/conclusion et des différentes parties de la dataviz facile\nScroll sur images : Intégration d’images et de textes, avec le scroll qui fait apparaitre le texte et l’image correspondante facile\nScroll sur du texte : Intégration de textes qui sera mis en évidence selon le scroll facile\nScroll sur un graphique en R : Création de graphique qui évoluera selon le scroll intermédiaire\nModification du thème : Changement de l’aspect de la dataviz en changeant le thème intermédiaire\nScroll sur des graphs ou cartes Javascript : Création de cartes qui évoluent avec le scroll avandé\nDéploiement sur Github Pages : Diffusion sur Internet avec Github Pages avandé\n\n\n\n\n\nAvoir accès à RStudio ou VSCode"
  },
  {
    "objectID": "formation.html#formation-closeread",
    "href": "formation.html#formation-closeread",
    "title": "Formation CloseRead",
    "section": "",
    "text": "Créer une première dataviz en datascrollytelling sur un thème qui vous tient à coeur.\n\n\n\nSelon votre niveau de connaissance en quarto/R/observable, vous pourrez vous arrêter en cours de formation. Mais vous aurez à toute étape une dataviz.\n\nStoryboard : Création du déroulé narratif de votre viz, avec création des textes et récupération des images/données utiles facile\nInitialisation : Création d’un document quarto et installation de closeread facile\nSquellette de la viz : Création de l’introduction/conclusion et des différentes parties de la dataviz facile\nScroll sur images : Intégration d’images et de textes, avec le scroll qui fait apparaitre le texte et l’image correspondante facile\nScroll sur du texte : Intégration de textes qui sera mis en évidence selon le scroll facile\nScroll sur un graphique en R : Création de graphique qui évoluera selon le scroll intermédiaire\nModification du thème : Changement de l’aspect de la dataviz en changeant le thème intermédiaire\nScroll sur des graphs ou cartes Javascript : Création de cartes qui évoluent avec le scroll avandé\nDéploiement sur Github Pages : Diffusion sur Internet avec Github Pages avandé\n\n\n\n\n\nAvoir accès à RStudio ou VSCode"
  },
  {
    "objectID": "formation.html#storyboard",
    "href": "formation.html#storyboard",
    "title": "Formation CloseRead",
    "section": "Storyboard",
    "text": "Storyboard"
  },
  {
    "objectID": "formation.html#initialisation-facile",
    "href": "formation.html#initialisation-facile",
    "title": "Formation CloseRead",
    "section": "Initialisation facile",
    "text": "Initialisation facile\nCloseRead est une extension conçue pour fonctionner avec Quarto. Avant de commencer, assurez-vous que votre environnement de travail est prêt :\n\nOuvrez RStudio : Lancez RStudio, l’environnement idéal pour travailler avec Quarto.\nCréez un projet dédié : Il est recommandé de créer un nouveau projet pour organiser vos fichiers. Cela facilitera la gestion des ressources et des dépendances.\nCréez un document Quarto : Générez un premier fichier .qmd (Quarto Markdown), qui servira de base à votre projet de datascrollytelling. Pour ce faire, utilisez l’option Fichier &gt; Nouveau fichier &gt; Quarto Document dans RStudio.  Puis remplissez les différents paramètres (décocher l’éditeur visuel) \nInstallez l’extension CloseRead : À la racine de votre projet (là où se trouve votre fichier .qmd), installez l’extension CloseRead. Cela permettra d’ajouter les fonctionnalités nécessaires à votre projet. Cela se passe dans le terminal à droite de la console. \n\nquarto add qmd-lab/closeread\n\n\n\n\n\n\nWarning\n\n\n\nSi vous êtes sur Cerise, il n’est pas possible d’installer l’extension. Pour contourner cette difficulté, récupérer le fichier _extensions.zip que vous trouverez sur CERISE/04-Espace-Echanges/Ateliers/Closeread et Téléchargez-le à la racine de votre projet. Le fichier sera automatiquement décompressé et l’extension sera active.\n\n\nUne fois ces étapes terminées, vous serez prêt à explorer les possibilités offertes par CloseRead pour enrichir vos visualisations et votre storytelling."
  },
  {
    "objectID": "formation.html#squellette-de-la-viz-facile",
    "href": "formation.html#squellette-de-la-viz-facile",
    "title": "Formation CloseRead",
    "section": "Squellette de la viz facile",
    "text": "Squellette de la viz facile\nVous pouvez commencer à créer un première squelette de dataviz :\n\nParamétrage de l’entête YAML\n\nIl fautindiquer que le format est closeread-html\n---\ntitle: Ma dataviz\nAuthor: Moi\nformat: closeread-html\n---\n\nAjouter votre texte d’introduction\nAjouter vos différents titres\n\n\n\n\n\n\n\nTip\n\n\n\nUn titre de niveau 1 est précédé d’un #, un titre de niveau 2 de deux ##, etc…\n\n\n\nVérifions que tout fonctionne\n\nEn cliquant sur le bouton Rendu, le quarto va générer une page web au format html.\n\n\n\n\n\n\n\nTip\n\n\n\nEn lançant le Rendu il vous sera demandé de sauvegarder le fichier .qmd au préalable"
  },
  {
    "objectID": "formation.html#scroll-sur-images-facile",
    "href": "formation.html#scroll-sur-images-facile",
    "title": "Formation CloseRead",
    "section": "Scroll sur images facile",
    "text": "Scroll sur images facile\n\nEtape 1 - chargement des textes et des images\nPour comprendre le fonctionnement, très simple, de closeread, ajoutez des images et du texte dans une de vos parties.\n\ncréez un répertoire img dans votre projet\ntéléchargez vos photos\ndans votre .qmd ajoutez les photos et les textes en les alternant\n\n\n\n\n\n\n\nTip\n\n\n\nUne photo s’ajoute très simplement avec le code ![](./img/ma_photo.png)\n\n\nVous pouvez tester un rendu pour vérifier que les images et le texte s’affichent correctement.\n\n\nEtape 2 - ajout d’une section closeread\nVous pouvez passer à l’animation de votre page avec closeread. Le principe est de faire défiler les textes au dessus des images, avec les images qui vont changer selon le niveau de scroll.\nVous devez indiquer à votre document quarto que vous souhaitez ajouter une section closeread. Englobez votre texte et vos images par la balise ouvrante de section CloseRead ::::{.cr-section} et la balise fermante ::::.\nVoici mon code :\n# Les grandes énigmes des données invisibles\n\n::::{.cr-section}\n\n![](./img/img1.webp)\n\n**L'énigme flottante des données invisibles**    \nLes chiffres chuchotent leurs secrets aux angles invisibles d'une géométrie oubliée. Saurons-nous un jour entendre leurs vérités non-numériques ? \n\n![](./img/img2.webp)\n\n**Le labyrinthe des connexions furtives**    \nChaque pixel est une porte, mais laquelle mène au sommet du triangle imaginaire ? Une énigme pour les esprits quantiques. \n\n![](./img/img3.webp)\n\n**L'éclipse des données perdues**     \nQuand les graphiques se camouflent dans les ombres des spectres, seule une poignée de courbes revient. Les autres ? Elles errent entre deux dimensions. \n\n::::\n\nVous pouvez tester un rendu pour vérifier que les images et le texte s’affichent dans une section closeread. Vous noterez que tout défile à gauche. En effet nous n’avons pas spécifié les éléments à mettre en défilement et les éléments à mettre en arrière plan.\n\n\nEtape 3 - choix des éléments de défilement et d’arrière plan\nDans notre exemple, les textes sont en défilement et les images viennent en arrière plan les unes après les autres.\nL’élément qui ne bouge pas (un sticky en closeread) est encadré par une balise préfixé par #cr-. Par exemple, la balise ouvrante est :::{#cr-monImage1} et la fermante est :::.\nL’élement qui bouge (un trigger) est suivi de l’appel de ce sticky sous la forme @cr-monImage1.\nVoici le code final avec 3 images :\n::::{.cr-section}           &lt;!--- Début d'une section CloseRead ---&gt;\n\n:::{#cr-image1}             &lt;!--- Un sticky (l'image de fond fixe) ---&gt;\n![](./img/img1.webp)\n:::                         &lt;!--- Fin du sticky  ---&gt;\n**L'énigme flottante des données invisibles**    \nLes chiffres chuchotent leurs secrets aux angles invisibles d'une géométrie oubliée. Saurons-nous un jour entendre leurs vérités non-numériques ? @cr-image1   ## appel du texte qui vient défiler sur le sticky @cr-image1\n\n:::{#cr-image2}                &lt;!--- Un autre sticky (l'image de fond change) ---&gt;\n![](./img/img2.webp)\n:::\n\n**Le labyrinthe des connexions furtives**    \nChaque pixel est une porte, mais laquelle mène au sommet du triangle imaginaire ? Une énigme pour les esprits quantiques. @cr-image2\n\n:::{#cr-image3}\n![](./img/img3.webp)\n:::\n\n**L'éclipse des données perdues**     \nQuand les graphiques se camouflent dans les ombres des spectres, seule une poignée de courbes revient. Les autres ? Elles errent entre deux dimensions. @cr-image3\n\n::::             &lt;!--- Fin de ma section closeread ---&gt;\n\nVous pouvez tester un rendu pour vérifier que le texte scrolle correctement et que l’image s’affiche bien.\nVous pouvez consulter le fichier d’exemple ici : 2-scroll_image"
  },
  {
    "objectID": "formation.html#scroll-sur-du-texte-facile",
    "href": "formation.html#scroll-sur-du-texte-facile",
    "title": "Formation CloseRead",
    "section": "Scroll sur du texte facile",
    "text": "Scroll sur du texte facile\n\nCas particulier de code"
  },
  {
    "objectID": "formation.html#scroll-sur-un-graphique-en-r-intermédiaire",
    "href": "formation.html#scroll-sur-un-graphique-en-r-intermédiaire",
    "title": "Formation CloseRead",
    "section": "Scroll sur un graphique en R intermédiaire",
    "text": "Scroll sur un graphique en R intermédiaire\nDans le datascrollytelling, l’utilisation de graphiques dynamiques constitue un puissant moyen de capter l’attention du lecteur et de transmettre des informations complexes de manière progressive. L’objectif est de synchroniser le texte défilant avec des visualisations interactives pour que les bonnes explications apparaissent au moment où les données pertinentes sont mises en avant. CloseRead facilite cette synchronisation en combinant des graphiques ggplot en “stickies” et des triggers en texte.\n\n\n\n\n\n\nTip\n\n\n\nSi vous n’avez pas envie de faire du ggplot, vous pouvez créer des graphiques dans un autre outil (datawrapper par exemple) et les exporter au format image. Ensuite il ne reste plus qu’à scroller ou zoomer comment pour les images.\n\n\n\nCréez le graphique complet en ggplot - écrivez les texte\n\nPour commencer vous devez créer votre graphique complet avec toutes les courbes. Pour que le scroll fasse apparaitre proprement les courbes il faut au préalable :\n\nPensez à définir les axes en fixant le min et le max : les axes ne bougeront pas quelque soient les données à afficher.\n\nFixez la couleur des courbes pour qu’elles soient identiques quelque soit le scroll. Par exemple en faisant un scale_color_manual(values = couleurs_especes).\n\nIntégrez la légende dans le graphique pour éviter que la taille de la légende fasse bouger la largeur du graphique.\n\nRédigez par ailleurs les textes que vous souhaitez afficher.\nVoilà un exemple du code ggpglot :\n\n# Chargement de ggplot2\nlibrary(ggplot2)\n\n# Création des données simulées\nset.seed(42)\ndata &lt;- data.frame(\n  année = rep(2010:2019, 3),\n  population = c(\n    100 + cumsum(rnorm(10, mean = 5, sd = 3)),  # Plumifloron Azuré\n    40 + cumsum(rnorm(10, mean = -2, sd = 4)), # Taurillon Rubicond\n    80 + cumsum(rnorm(10, mean = 3, sd = 2))    # Luminéon Écarlate\n  ),\n  espèce = rep(c(\"Plumifloron Azuré\", \n                 \"Taurillon Rubicond\", \n                 \"Luminéon Écarlate\"), each = 10)\n)\n\n# On fixe les couleurs\ncouleurs_especes &lt;- c(\n  \"Plumifloron Azuré\" = \"#1E90FF\",     \n  \"Taurillon Rubicond\" = \"#FF4500\",    \n  \"Luminéon Écarlate\" = \"#32CD32\"     \n)\n\n# Graphique avec un geom par courbe et axes fixes\nggplot(data, aes(x = année, y = population, color = espèce)) +\n  geom_line(data = subset(data, espèce == \"Plumifloron Azuré\")) +  \n  geom_line(data = subset(data, espèce == \"Taurillon Rubicond\")) +   \n  geom_line(data = subset(data, espèce == \"Luminéon Écarlate\")) +   \n  scale_x_continuous(limits = c(2010, 2019), breaks = 2010:2019) + \n  scale_y_continuous(limits = c(0, 175)) +    \n      scale_color_manual(values = couleurs_especes) +  \n  labs(\n    title = \"Évolution des populations animales (2010-2019)\",\n    x = \"Année\",\n    y = \"Population\",\n    color = \"Espèces\"\n  ) +\n  theme_minimal()+\n  theme(legend.position = c(.2, 0.9)) \n\n\nCréez la section closeRead\n\nVous créez une section closeRead où vous mettez dedans :\n\ndes stickies correspondant à vos graphiques (donc des stickies qui englobent chacun un chunk R)\ndes textes pour les triggers\n\nDans notre exemple, nous avons 4 textes : un texte de présentation, puis un texte par espèce. Nous avons donc également 4 stickies : un premier stocky qui comprend un chunk avec un graphique vide sans aucun geom_line, puis pour chacun des 3 autres stickies on ajoute à chaque fois un geom_line. Il ne reste plus qu’à faire coïncider les stickies et les triggers.\nL’exemple 5-scroll-graph-ggplot.qmd vous montrera l’implémentation.\n\n\n\n\n\n\nTip\n\n\n\nNous avons choisi que le scroll permet d’afficher progressivement chacune des courbes. Vous pourriez aussi jouer sur la taille des courbes ou leurs couleurs. Le principe reste le même !\n\n\n\n\n\n\n\n\nTip\n\n\n\nVous pouvez jouer sur la taille du graphique affiché directement dans les options de quarto: fig-width et fig-height à définir dans les options du chunk."
  },
  {
    "objectID": "formation.html#modification-du-thème-intermédiaire",
    "href": "formation.html#modification-du-thème-intermédiaire",
    "title": "Formation CloseRead",
    "section": "Modification du thème intermédiaire",
    "text": "Modification du thème intermédiaire\nUne datavisualisation efficace combine clarté des données et esthétique soignée. Pour cela, Quarto et CloseRead offrent des outils complémentaires : le premier permet une gestion globale du thème et la mise en page des éléments textuels, tandis que le second fournit des options pour personnaliser et enrichir la présentation dynamique.\n\nThèmes quarto\nPar défaut, quarto propose 25 thèmes de rendu Voir HTML Theming dans la doc quarto.\nDans l’entête yaml du document quarto, tentez simplement de paramétrer le thème. Par exemple, reprenez votre entente et mettez :\n---\ntitle: \"Ma super dataviz\"\nauthor: \"Moi\"\nformat: \n  closeread-html:\n    theme: cyborg\n---\nIl est possible de venir surcharger le thème en changeant la taille de la police, la couleur de fond, ect… Par exemple :\n---\ntitle: \"Ma super dataviz\"\nauthor: \"Moi\"\nformat: \n  closeread-html:\n    theme: cyborg\n    backgroundcolor: darkslateblue\n    fontsize: 1.4em\n---\nVous constaterez que seules les parties hors section closeRead sont impactées. C’est déjà un bon début.\n\n\nMise en page des éléments textuels\nQuarto permet le formatage classique de markdown :\n\nPolice : *italics*, **bold**, ***bold italics***\nTitres : # Header 1, ## Header 2, ### Header 3...\nListes : * unordered list     + sub-item 1     + sub-item 2         - sub-sub-item 1\n\nQuarto permet également de créer des blocs avec des mises en forme spécifiques. Pour cela il faut créer une section et lui dire quel style appliqué selon les 5 possibilités : note, tip, warning, caution, and important. Par exemple :\n:::{.callout-note}\nCeci est une note !\n:::\n\n:::{.callout-tip}\nEt là une astuce\n:::\n\n:::{.callout-warning title=\"Attention attention\"}\nMaintenant un bloc d'attention avec un titre\n:::\n\n\n\n\n\n\n\nWarning\n\n\n\nCes blocs ne semblent pas bien fonctionner dans le texte qui défile en Closeread.\n\n\n\n\nLayouts CloseRead\nPar défaut le défilement se fait à gauche avec l’image/texte/graphique qui reste à droite. En closeread on dit que le layout est “sidebar-left”. Pour le changer on peut soit le définir pour toute la page, soit pour une section en particulier.\nSi vous voulez le changer pour toute la page, vous l’indiquez dans le yaml en entête :\n---\ntitle: \"Ma super dataviz\"\nauthor: \"Moi\"\nformat: \n  closeread-html:\n    theme: cyborg\n    backgroundcolor: darkslateblue\n    fontsize: 1.4em\n    cr-section:\n      layout: \"overlay-center\"\n---\nPour le définir juste sur une section, vous devez l’indiquer à la création de la section :\n:::{.cr-section layout=\"overlay-center\"}\n\n\n//// le contenu de la section ici...\n\n:::\nLes options de layout sont\n\nsidebar-left (par défaut)\nsidebar-right\noverlay-left\noverlay-center\noverlay-right\n\n\n\nThèmes et mise en page CloseRead\nLes aspects de rendu spécifiques de Closeread se paramètrent dans l’entête dans la clé cr-style. Par exemple :\n---\ntitle: \"Ma super dataviz\"\nauthor: \"Moi\"\nformat: \n  closeread-html:\n    theme: cyborg\n    backgroundcolor: darkslateblue\n    fontsize: 1.4em\n    cr-section:\n      layout: \"overlay-center\"\n    cr-style:\n      narrative-background-color-sidebar: darkslateblue\n      narrative-text-color-sidebar: white\n      section-background-color: darkslateblue\n      narrative-background-color-overlay: violet\n      narrative-text-color-overlay: black\n---\nDans cet exemple, j’ai passé tout le fond en violet aussi bien pour la partie de gauche où le texte scrolle que pour la partie centrale. Pour le texte qui vient se mettre par dessus l’image, j’ai mis une couleur violette et un texte en noir. Les autres options sont disponibles sur le site de documentation CloseRead.\n\n\nMise en page CloseRead en CSS\nPour aller plus loin dans la mise en page, vous pouvez définir des éléments de feuilles de style dans votre document quarto. Par exemple, créez un chunk de type ```{=html} :\n&lt;!-- some quick style customisation: see https://closeread.dev/guide/styling --&gt;\n&lt;style&gt;\n  .cr-section.overlay-left {\n    background-color: white;\n  }\n\n  .cr-section.overlay-left .narrative-col .narrative {\n    font-size: 1.15em;\n    background-color: #3a79aa;\n    color: #f1f1f1;\n    padding: 0.6em 0.8em;\n    border-radius: 1;\n    backdrop-filter: blur(10px);\n  }\n  \n  .cr-section.overlay-left .narrative-col .narrative a {\n    background-color: #3a79aa;\n    color: #f1f1f1;\n  }\n  \n&lt;/style&gt;\nVous pouvez voir un exemple ici : 6-scroll_image_with_theme.qmd"
  },
  {
    "objectID": "formation.html#scroll-sur-des-graphs-ou-cartes-javascript-avandé",
    "href": "formation.html#scroll-sur-des-graphs-ou-cartes-javascript-avandé",
    "title": "Formation CloseRead",
    "section": "Scroll sur des graphs ou cartes Javascript avandé",
    "text": "Scroll sur des graphs ou cartes Javascript avandé"
  },
  {
    "objectID": "formation.html#déploiement-sur-github-pages-avandé",
    "href": "formation.html#déploiement-sur-github-pages-avandé",
    "title": "Formation CloseRead",
    "section": "Déploiement sur Github Pages avandé",
    "text": "Déploiement sur Github Pages avandé"
  },
  {
    "objectID": "maps.html",
    "href": "maps.html",
    "title": "OJS Maps",
    "section": "",
    "text": "If you’ve seen the OJS Basics demo, you’ve seen ways that we can use scroll progress to make graphics that “animate” as the user scrolls.\nThat demo completely destroys and recreates the graphic continuously as the user scrolls, which works well for Observable Plot.\nBut many other JavaScript frameworks have animation capabilities built in, and if you want to leverage those capabilities, you may not be able to use this technique - any potential animation in them is lost the moment you destroy it.\nIn these cases, we initialise the map in one chunk of OJS code, then write the reactive bit — the part that ties it to our scroll progress — in a separate chunk.\n\nBertin.js\nBertin.js is a simple mapping library. You can absolutely use it as we do in the OJS Basics demo, replacing the map wholesale. But you can also use its update() function to change it\n\ncities = [\n  { name: \"Brisbane\",  lat: -27.467778, lon: 153.028056 },\n  { name: \"New Delhi\", lat: 28.613889,  lon: 77.208889 },\n  { name: \"Singapore\", lat: 1.283333,   lon: 103.833333 },\n  { name: \"Istanbul\",  lat: 41.013611,  lon: 28.955 },\n  { name: \"Paris\",     lat: 48.856667,  lon: 2.352222 },\n  { name: \"Nairobi\",   lat: -1.286389,  lon: 36.817222 },\n  { name: \"São Paulo\", lat: -23.55,     lon: -46.633333 },\n  { name: \"Montreal\",  lat: 45.508889,  lon: -73.554167 },\n  { name: \"Houston\",   lat: 29.762778,  lon: -95.383056 },\n  { name: \"Vancouver\", lat: 49.260833,  lon: -123.113889 },\n  { name: \"Honolulu\",  lat: 21.306944,  lom: -157.858333 }\n]\n\nworld = FileAttachment(\"naturalearth-land-110m.geojson\").json()\n\n// add a population column and convert to geojson\ncitiesGeo = bertin.table2geo(cities.map(d =&gt; ({...d, size: 3})))\n\nbertin = require(\"bertin@1.8\")\n\nL = require('leaflet@1.2.0')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\nNow we can update aspects of the map:\n\n// echo: true\nnewMap = {\n  const scrollColour = crTriggerIndex &gt;= 1 ?\n    \"royalblue\" : \"orangered\"\n\n  bertinMap.update({\n    id: \"city-layer\",\n    attr: \"fill\",\n    value: scrollColour,\n    duration: 1000\n  })\n}\n\n\n\n\n\n\n\n\n\n\nNotice that the map transitions between states instead of being replaced!\n\n\n\n\n\n\n\nbertinMap = bertin.draw({\n  params: { projection: d3.geoNaturalEarth1() },\n  layers: [\n    {\n      id: \"city-layer\",\n      type: \"bubble\",\n      geojson: citiesGeo,\n      values: \"size\",\n      k: 20,\n      fill: \"orangered\",\n\n      tooltip: [ \"$name\" ]\n    },\n    {\n      type: \"layer\",\n      geojson: world,\n      fill: \"#f5d482\"\n    },\n    { type: \"graticule\" },\n    { type: \"outline\" }\n  ]\n})\n\n\n\n\n\n\n\n\n\n\nNice! Let’s see if we can apply this to a slightly more complex example.\n\n\nLeaflet\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\n\n\n\n\n\nEssai\n\n\n\n\n\n\n\nmap = {\n  let container = DOM.element('div', { style: `height:180px;` });\n  yield container;\n  let map = L.map(container)\n    .setView([51.505, -0.09], 13);\n  let layer = L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt;'\n  })\n    .addTo(map);\n\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\nMapLibre\nLet’s try the technique out with MapLibre, an open fork of Mapbox GL JS.\n\n\nThis pattern will work just as well with Mapbox, as well as with most frameworks that let you call separate code to ‘update’ their graphics.\nMapLibre doesn’t require an API key the way Mapbox does, but it also doesn’t come with any tiles out of the box.\n\nr = require.alias({\n  maplibregl: \"maplibre-gl@2.1.9/dist/maplibre-gl.js\",\n  h3: {},\n  // deck: \"deck.gl@8.9.35/dist.min.js\"\n})\n\nmaplibregl = r(\"maplibregl\").catch(() =&gt; window[\"maplibregl\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToday we’ll use some demo tiles that MapLibre provides — they’re great for global or continental scale maps, but if you need to show more fine-grained stuff like streets, you might need to make your own tiles or look for a commercial service.\n\n\n\n\nFirstly, we’ll initialise our map. This has three steps:\n\nCreate a container for it\nInitialise the map itself\nWhen the map is ready, connect it back to OJS. This lets us use the map as an input if we want to do that\n\n\n\n\n\nNow that the map is ready, we can start to change it!\n\ntour = {\n  switch (crTriggerIndex) {\n    case 5:\n      scrollMap.flyTo({\n        // se australia\n        center: [147, -35],\n        zoom: 4\n      })\n      break\n    case 6:\n      scrollMap.flyTo({\n        // western usa\n        center: [-120, 42],\n        zoom: 4\n      })\n      break\n    default:\n      scrollMap.flyTo({\n        bounds: [[-175, -80], [175, 85]]\n      })\n  }\n}\n\n\n\n\n\n\n\n\n\n\nLet’s move the map to south-eastern Australia.\n\n\n\n\nAnd then to the west coast of the US!\n\n\n\n\nWe can modify any of the map’s methods — or even update a layer on the map, like filtering it or changing its colours.\n\n\n\n\n\n\n\nviewof scrollMap = {\n  \n  // set the space up for the map\n  // (note that you must currently manually size a full-bleed map!)\n  let container = html`&lt;div style=\"height: 100vh; width: 100vw;\"&gt;&lt;/div&gt;`\n  \n  /* you can also create an element for the map to appear where you\n     initialise it. this also requires some extra fiddling with size */\n  // let container = document.getElementById(\"cr-maplibre\")\n  \n  yield container\n  \n  // set the map up\n  let map = new maplibregl.Map({\n    container,\n    bounds: [[-175, -80], [175, 85]],\n    pitch: 30,\n    antialias: true,\n    style: \"style.json\",\n    interactive: false\n  })\n\n  map.on(\"load\", () =&gt; {\n    container.value = map\n    container.dispatchEvent(new CustomEvent(\"input\"))\n\n    // if your map has layers, create them separately and\n    // call `map.addLayer()` here!\n  })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`"
  },
  {
    "objectID": "carte_closeread-main/troisieme_carte.html",
    "href": "carte_closeread-main/troisieme_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = crProgressBlock\n\n\n\n\n\n\nAh, la Bretagne ! Terre des anciens mystères et des horizons oubliés, elle se dresse telle une sentinelle à l’extrémité occidentale d’Eurasie, avançant hardiment son front de roc vers les eaux tumultueuses de l’Atlantique. Là-bas, à l’orée du monde, ses paysages s’étirent comme des murmures d’éternité.\nPour qui s’aventure jusqu’à ces contrées lointaines, après de longues traversées au gré des routes sinueuses, la Bretagne révèle son secret : elle n’est pas qu’une péninsule, mais un royaume d’emboîtements infinis, une danse fractale où chaque cap en cache un autre, où chaque promontoire semble chuchoter l’histoire des siècles.\nVoyageur, contemple ! Ces rivages ne sont pas de simples terres, mais des fragments du Grand Tissage. Ici, la géographie elle-même raconte l’épopée d’une terre façonnée par l’océan et le vent, une frontière entre l’ici et l’ailleurs, le connu et l’infini.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière, fief familiale d’Anaël et François , deux personnalités aussi antinomiques qu’attachantes.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis..\n\n\n\n\nUn département de légende, peuplé d’irréductibles Gaulois\n\n\n\n\nEn avant vers les Côtes-d’Armor\n\n\n\n\nOu plus précisément une presqu’île…\n\n\n\n\nA l’est du département, quasiment caché du reste du monde…\n\n\n\n\nFractale parmi les fractales, elle se cache pour mieux se découvrir…\n\n\n\n\n\nBienvenue à Saint-Jacut-de-la-Mer\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: 'blue', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: 'green', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: 'gray'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: 'gray', fill: 'lightgray'}),\n    Plot.geo(com, {fill: 'red', stroke: 'red', strokeWidth: 6, fillOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4  ),\n                   strokeOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4)}),\n    Plot.geo(bretagne, {fill: 'orange', fillOpacity:  1-(progression)/.5})\n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "carte_closeread-main/premiere_carte.html",
    "href": "carte_closeread-main/premiere_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection:   [\"53\"],\n    inverse: false\n})\n\n\n\n\n\n\nLes paysages de Bretagne sont d’abord les paysages d’un cap à l’extrémité occidentale de l’Eurasie, d’une avancée de terre dans l’océan Atlantique, des paysages de bout du monde. La découverte de ces paysages après de longues heures d’approche, comme leur fréquentation quotidienne à distance des centres continentaux, ne peut faire abstraction de cette position géographique sur la façade atlantique. Pour la Bretagne, la conscience d’être sur une péninsule est d’autant plus forte que le schéma est reproduit à différentes échelles, comme un emboîtement infini de caps, une déclinaison fractale du bout du monde.\n\nx_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([99225, 118203])\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([1242375, 403455])\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([6049646, 6691429])\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain([0, 4])\n  .range([7110480, 6892032])\n  .clamp(true)\n\n\n\nx_min = x_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\nx_max = x_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_min = y_min_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\ny_max = y_max_f((crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière qui a vu naître des personnalités aussi antinomiques qu’Anaël et François.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis.. \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\nEn avant vers les Côtes-d’Armor \n\n\n\n\n\n\n\nmap = bertin.draw({\n  params: {\n    background: \"#bde1f0\",\n    projection: \"user\",\n    extent : [[x_min , y_min], [x_max, y_max]]\n  },\n\n  layers: [\n     {\n      id: \"mylayerid\",\n      type: \"layer\",\n      geojson: bretagne,\n      fill:  \"red\"\n      \n    },\n    \n    {\n      id: \"toto\",\n      type: \"layer\",\n      geojson: regs,\n      fill: \"orange\"\n      \n    },\n \n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`-----`\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "carte_closeread-main/deuxieme_carte.html",
    "href": "carte_closeread-main/deuxieme_carte.html",
    "title": "Zoom sur Saint-Jacut",
    "section": "",
    "text": "bertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = (crTriggerIndex != null ? crTriggerIndex : 0) + crTriggerProgress\n\n\n\n\n\n\nAh, la Bretagne ! Terre des anciens mystères et des horizons oubliés, elle se dresse telle une sentinelle à l’extrémité occidentale d’Eurasie, avançant hardiment son front de roc vers les eaux tumultueuses de l’Atlantique. Là-bas, à l’orée du monde, ses paysages s’étirent comme des murmures d’éternité.\nPour qui s’aventure jusqu’à ces contrées lointaines, après de longues traversées au gré des routes sinueuses, la Bretagne révèle son secret : elle n’est pas qu’une péninsule, mais un royaume d’emboîtements infinis, une danse fractale où chaque cap en cache un autre, où chaque promontoire semble chuchoter l’histoire des siècles.\nVoyageur, contemple ! Ces rivages ne sont pas de simples terres, mais des fragments du Grand Tissage. Ici, la géographie elle-même raconte l’épopée d’une terre façonnée par l’océan et le vent, une frontière entre l’ici et l’ailleurs, le connu et l’infini.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=4 ? [0, 4] : [4,7]))\n  .range((progression&lt;=4 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLa Bretagne est une terre singulière, fief familiale d’Anaël et François, deux personnalités aussi antinomiques qu’attachantes.\n\n\n\n\nMais aujourd’hui, ce qui nous intéresse, ce n’est pas la Bretagne dans son ensemble, mais un département bien précis..\n\n\n\n\nUn département de légende, peuplé d’irréductibles Gaulois\n\n\n\n\nEn avant vers les Côtes-d’Armor\n\n\n\n\nOu plus précisément une presqu’île…\n\n\n\n\nA l’est du département, quasiment caché du reste du monde…\n\n\n\n\nFractale parmi les fractales, elle se cache pour mieux se découvrir…\n\n\n\n\n\nBienvenue à Saint-Jacut-de-la-Mer\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: 'blue', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: 'green', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: 'gray'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: 'gray', fill: 'lightgray'}),\n    Plot.geo(com, {fill: 'red', stroke: 'red', strokeWidth: 6, fillOpacity: (progression&lt;6 ? 0 : progression  )/8,\n                   strokeOpacity: (progression&lt;6 ? 0 : progression)/8,}),\n    Plot.geo(bretagne, {fill: 'orange', fillOpacity:  1-(progression)/4})\n    \n  ]\n})\n\n\n\n\n\n\n\n\n\n\nSometimes it can be worth closing your story with some additional text to give the scrollytelling section some room to breathe. So here’s some nonsense!\nEu in culpa officia cupidatat nostrud laborum do consequat officia Lorem tempor consectetur pariatur sunt. Veniam culpa dolore laborum nostrud ipsum pariatur ipsum dolore consectetur commodo ex. Non culpa deserunt voluptate. Amet excepteur incididunt deserunt pariatur velit labore do sunt occaecat eiusmod. Tempor proident sint exercitation culpa incididunt sunt proident sunt reprehenderit. Sint ipsum qui id nisi quis officia in. Anim velit minim fugiat qui dolor enim occaecat amet excepteur do aliqua ex adipisicing laboris labore.\nCulpa aute sint aliquip in aute enim cillum in exercitation cupidatat ex cupidatat mollit dolore ut. Et culpa minim laborum in ipsum laborum velit laboris fugiat ad culpa cillum. Sit nulla eu minim in nulla. Nulla esse sint occaecat eiusmod in irure in dolor veniam pariatur laboris consectetur sunt laboris excepteur. Dolor dolore ad incididunt consequat. Ad elit ullamco veniam cillum reprehenderit pariatur pariatur nisi ea. Pariatur quis ut deserunt eiusmod ipsum magna ullamco."
  },
  {
    "objectID": "carte_closeread-main/maps.html",
    "href": "carte_closeread-main/maps.html",
    "title": "OJS Maps",
    "section": "",
    "text": "If you’ve seen the OJS Basics demo, you’ve seen ways that we can use scroll progress to make graphics that “animate” as the user scrolls.\nThat demo completely destroys and recreates the graphic continuously as the user scrolls, which works well for Observable Plot.\nBut many other JavaScript frameworks have animation capabilities built in, and if you want to leverage those capabilities, you may not be able to use this technique - any potential animation in them is lost the moment you destroy it.\nIn these cases, we initialise the map in one chunk of OJS code, then write the reactive bit — the part that ties it to our scroll progress — in a separate chunk.\n\nBertin.js\nBertin.js is a simple mapping library. You can absolutely use it as we do in the OJS Basics demo, replacing the map wholesale. But you can also use its update() function to change it\n\ncities = [\n  { name: \"Brisbane\",  lat: -27.467778, lon: 153.028056 },\n  { name: \"New Delhi\", lat: 28.613889,  lon: 77.208889 },\n  { name: \"Singapore\", lat: 1.283333,   lon: 103.833333 },\n  { name: \"Istanbul\",  lat: 41.013611,  lon: 28.955 },\n  { name: \"Paris\",     lat: 48.856667,  lon: 2.352222 },\n  { name: \"Nairobi\",   lat: -1.286389,  lon: 36.817222 },\n  { name: \"São Paulo\", lat: -23.55,     lon: -46.633333 },\n  { name: \"Montreal\",  lat: 45.508889,  lon: -73.554167 },\n  { name: \"Houston\",   lat: 29.762778,  lon: -95.383056 },\n  { name: \"Vancouver\", lat: 49.260833,  lon: -123.113889 },\n  { name: \"Honolulu\",  lat: 21.306944,  lom: -157.858333 }\n]\n\nworld = FileAttachment(\"naturalearth-land-110m.geojson\").json()\n\n// add a population column and convert to geojson\ncitiesGeo = bertin.table2geo(cities.map(d =&gt; ({...d, size: 3})))\n\nbertin = require(\"bertin@1.8\")\n\nL = require('leaflet@1.2.0')\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\nNow we can update aspects of the map:\n\n// echo: true\nnewMap = {\n  const scrollColour = crTriggerIndex &gt;= 1 ?\n    \"royalblue\" : \"orangered\"\n\n  bertinMap.update({\n    id: \"city-layer\",\n    attr: \"fill\",\n    value: scrollColour,\n    duration: 1000\n  })\n}\n\n\n\n\n\n\n\n\n\n\nNotice that the map transitions between states instead of being replaced!\n\n\n\n\n\n\n\nbertinMap = bertin.draw({\n  params: { projection: d3.geoNaturalEarth1() },\n  layers: [\n    {\n      id: \"city-layer\",\n      type: \"bubble\",\n      geojson: citiesGeo,\n      values: \"size\",\n      k: 20,\n      fill: \"orangered\",\n\n      tooltip: [ \"$name\" ]\n    },\n    {\n      type: \"layer\",\n      geojson: world,\n      fill: \"#f5d482\"\n    },\n    { type: \"graticule\" },\n    { type: \"outline\" }\n  ]\n})\n\n\n\n\n\n\n\n\n\n\nNice! Let’s see if we can apply this to a slightly more complex example.\n\n\nLeaflet\n\n\n\n\nFirst, let’s draw the map. Let’s mark the cities from the OJS Basics demo too.\n\n\n\n\n\n\n\n\n\nEssai\n\n\n\n\n\n\n\nmap = {\n  let container = DOM.element('div', { style: `height:180px;` });\n  yield container;\n  let map = L.map(container)\n    .setView([51.505, -0.09], 13);\n  let layer = L.tileLayer(\"https://tile.openstreetmap.org/{z}/{x}/{y}.png\", {\n    attribution: '&copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt;'\n  })\n    .addTo(map);\n\n\n  \n}\n\n\n\n\n\n\n\n\n\n\n\n\nMapLibre\nLet’s try the technique out with MapLibre, an open fork of Mapbox GL JS.\n\n\nThis pattern will work just as well with Mapbox, as well as with most frameworks that let you call separate code to ‘update’ their graphics.\nMapLibre doesn’t require an API key the way Mapbox does, but it also doesn’t come with any tiles out of the box.\n\nr = require.alias({\n  maplibregl: \"maplibre-gl@2.1.9/dist/maplibre-gl.js\",\n  h3: {},\n  // deck: \"deck.gl@8.9.35/dist.min.js\"\n})\n\nmaplibregl = r(\"maplibregl\").catch(() =&gt; window[\"maplibregl\"])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nToday we’ll use some demo tiles that MapLibre provides — they’re great for global or continental scale maps, but if you need to show more fine-grained stuff like streets, you might need to make your own tiles or look for a commercial service.\n\n\n\n\nFirstly, we’ll initialise our map. This has three steps:\n\nCreate a container for it\nInitialise the map itself\nWhen the map is ready, connect it back to OJS. This lets us use the map as an input if we want to do that\n\n\n\n\n\nNow that the map is ready, we can start to change it!\n\ntour = {\n  switch (crTriggerIndex) {\n    case 5:\n      scrollMap.flyTo({\n        // se australia\n        center: [147, -35],\n        zoom: 4\n      })\n      break\n    case 6:\n      scrollMap.flyTo({\n        // western usa\n        center: [-120, 42],\n        zoom: 4\n      })\n      break\n    default:\n      scrollMap.flyTo({\n        bounds: [[-175, -80], [175, 85]]\n      })\n  }\n}\n\n\n\n\n\n\n\n\n\n\nLet’s move the map to south-eastern Australia.\n\n\n\n\nAnd then to the west coast of the US!\n\n\n\n\nWe can modify any of the map’s methods — or even update a layer on the map, like filtering it or changing its colours.\n\n\n\n\n\n\n\nviewof scrollMap = {\n  \n  // set the space up for the map\n  // (note that you must currently manually size a full-bleed map!)\n  let container = html`&lt;div style=\"height: 100vh; width: 100vw;\"&gt;&lt;/div&gt;`\n  \n  /* you can also create an element for the map to appear where you\n     initialise it. this also requires some extra fiddling with size */\n  // let container = document.getElementById(\"cr-maplibre\")\n  \n  yield container\n  \n  // set the map up\n  let map = new maplibregl.Map({\n    container,\n    bounds: [[-175, -80], [175, 85]],\n    pitch: 30,\n    antialias: true,\n    style: \"style.json\",\n    interactive: false\n  })\n\n  map.on(\"load\", () =&gt; {\n    container.value = map\n    container.dispatchEvent(new CustomEvent(\"input\"))\n\n    // if your map has layers, create them separately and\n    // call `map.addLayer()` here!\n  })\n\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\nmd`Active sticky: ${crActiveSticky}`\n\n\n\n\n\n\n\nmd`Active trigger: ${crTriggerIndex}`\n\n\n\n\n\n\n\nmd`Trigger progress: ${(crTriggerProgress * 100).toFixed(1)}%`\n\n\n\n\n\n\n\nmd`Scroll direction: ${crDirection}`\n\n\n\n\n\n\n\nmd`Progress Block progress: ${(crProgressBlock * 100).toFixed(1)}%`"
  },
  {
    "objectID": "carte_closeread-main/about.html",
    "href": "carte_closeread-main/about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\n[1] 2"
  },
  {
    "objectID": "index_en.html",
    "href": "index_en.html",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "",
    "text": "Ah, Saint-Jacut-de-la-Mer… Just saying its name brings forth images of my childhood, bathed in light and salt.\nIt’s a village nestled in the heart of the Côtes-d’Armor, a nearly unreal peninsula where the sea and land whisper secrets to each other. Every summer, we would gather there—my brother, my parents, and a large tribe of cousins whose laughter filled the streets and beaches. The days seemed endless, split between card games on the beach, intense foosball matches at La Frégate, and long hours spent gazing at the horizon.\nAnd that horizon… It always led to the Ébihens archipelago, a wild gem we reached on foot at low tide, as if crossing into another world. Even now, I return there with my own children. It’s like passing a baton, a tribute to this paradise where time stands still."
  },
  {
    "objectID": "index_en.html#discovering-a-breton-paradise",
    "href": "index_en.html#discovering-a-breton-paradise",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Discovering a Breton Paradise",
    "text": "Discovering a Breton Paradise\n\nbertin = require(\"bertin\")\n\n\n\n\n\n\n\nregs = FileAttachment(\"data/reg_francemetro_2024.json\").json();\ndeps = FileAttachment(\"data/dep_reg_53_2024.json\").json();\ncom = FileAttachment(\"data/commune22302_dep_22_2024.json\").json();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbretagne = bertin.properties.subset({\n    geojson: regs,\n    field: \"code\",\n    selection: [\"53\"],\n    inverse: false\n})\n\n\ndep22 = bertin.properties.subset({\n    geojson: deps,\n    field: \"code\",\n    selection: [\"22\"],\n    inverse: false\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nzoom = {return { \n            type: \"Polygon\",\n            coordinates:  [[[x_min,y_min],[x_min,y_max],[x_max,y_max],[x_max,y_min],[x_min,y_min]]]\n            \n          }\n        }\n        \nmer = {return { \n            type: \"Polygon\",\n            coordinates:  [[[0, 6000000],[0,7500000],[1200000,7500000],[1200000,6000000],[0, 6000000]]]\n            \n          }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nprojection = d3.geoIdentity()\n    .reflectY(true)\n    .fitSize([width/2, width /2 ], zoom);\n\n\n\n\n\n\n\nprogression = crProgressBlock\n\n\n\n\n\n\nBrittany, a land of ancient mysteries and forgotten horizons, stands like a sentinel at the western edge of Eurasia, boldly thrusting its rocky head towards the tumultuous waters of the Atlantic. There, at the world’s edge, its landscapes stretch like whispers of eternity.\nFor those who venture to these distant lands, after long journeys along winding roads, Brittany reveals its secret: it is not just a peninsula, but a kingdom of endless overlaps, a fractal dance where every cape hides another, where every promontory seems to whisper the history of centuries.\nTraveler, behold! These shores are not just simple lands, but fragments of the Great Weave. Here, geography itself tells the epic of a land shaped by the ocean and the wind, a frontier between here and elsewhere, the known and the infinite.\n\nx_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [99225, 118203] : [118203,306043]))\n  .clamp(true)\n  \nx_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [1242375, 403455] : [403455,327679]))\n  .clamp(true)\n  \ny_min_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [6049646, 6691429] : [6691429,6839888]))\n  .clamp(true)  \n\ny_max_f = d3.scaleLinear()\n  .domain((progression&lt;=.5 ? [0, .5] : [.5,1]))\n  .range((progression&lt;=.5 ? [7110480, 6892032] : [6892032,6854870]))\n  .clamp(true)\n\n\n\nx_min = x_min_f(progression)\nx_max = x_max_f(progression)\ny_min = y_min_f(progression)\ny_max = y_max_f(progression)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBrittany is a unique land, the family stronghold of Anaël and François, two personalities as contrasting as they are endearing.\n\n\n\n\nBut today, what interests us is not Brittany as a whole, but a very specific department……\n\n\n\n\nA legendary department, inhabited by irreducible Gauls…\n\n\n\n\nOnward to the Côtes-d’Armor…\n\n\n\n\nOr more precisely a peninsula…\n\n\n\n\nIn the east of the department, almost hidden from the rest of the world…\n\n\n\n\nA fractal among fractals, it hides to reveal itself better…\n\n\n\n\n\nWelcome to Saint-Jacut-de-la-Mer!\n\n\n\n\n\n\n\nPlot.plot({\n  projection:  projection,\n    \n    width: width/2,\n    height: width/2,\n\n\n  marks: [\n    Plot.geo(mer, {strokeOpacity: 1, fill: '#034159', stroke: 'white'}),\n    Plot.geo(regs, {strokeOpacity: 1, fill: '#038C3E', stroke: 'white'}),\n    Plot.geo(bretagne, {strokeOpacity: 1, fill: 'white'}),\n    Plot.geo(deps, {strokeOpacity: 1,  stroke: '#034159'}),\n    Plot.geo(dep22, {strokeOpacity: 1,  stroke: '#034159', fill: 'lightgray'}),\n    Plot.geo(com, {fill: '#0CF25D', stroke: '#0CF25D', strokeWidth: 8, fillOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4  ),\n                   strokeOpacity: (progression&lt;.6 ? 0 : (progression-.6)/.4)}),\n    Plot.geo(bretagne, {fill: '#0CF25D', fillOpacity:  1-(progression)/.5})\n    \n  ]\n})"
  },
  {
    "objectID": "index_en.html#treasures-of-saint-jacut-de-la-mer",
    "href": "index_en.html#treasures-of-saint-jacut-de-la-mer",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Treasures of Saint-Jacut-de-la-Mer",
    "text": "Treasures of Saint-Jacut-de-la-Mer\n\n\n\n\nLa Banche : The lively heart of Saint-Jacut, with its fisherman’s houses and small alleys. You can feel the village’s soul here.\n\n\n\n\nLe Port : A peaceful haven where leisure boats and shellfish boats gently sway. The ideal starting point for a maritime escape.\n\n\n\n\nLe Camping : A family space, just steps from the beach, where generations meet, between children’s laughter and evenings under the stars.\n\n\n\n\nLa plage du Rougeret : A stretch of golden sand that gently extends, perfect for barefoot walks and crab fishing parties. At low tide, it reveals treasures; at high tide, it invites swimming.\n\n\n\n\nLa Pointe du Chevet (Chef de l’île) : A wild promontory where the pines bend to the wind, offering a breathtaking view of the Ebihens archipelago. A place to dream and breathe.\n\n\n\n\nL’île des Ébihens : A mysterious archipelago, accessible only at low tide when the sea recedes to reveal its secret path. There, the world changes. You find white sand beaches, trails bordered by pines, and a sense of the edge of the world. It’s a place of adventure and contemplation, where you can forget time, lulled by the song of the waves and the cry of the seagulls."
  },
  {
    "objectID": "index_en.html#hidden-gems-nearby",
    "href": "index_en.html#hidden-gems-nearby",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Hidden Gems Nearby",
    "text": "Hidden Gems Nearby\n\n\n\n\n\nAround Saint-Jacut-de-la-Mer, just a few seagull flaps away, hide treasures that make you want to hit the road. Places full of stories and beauty, where history and nature meet to offer breathtaking landscapes.\n\n\n\n\nSaint-Malo : The corsair city\nThe corsair city surrounded by its ramparts seems to defy time and the ocean. Every alley whispers tales of corsairs, while the National Fort watches stoically. Wandering within the walls, with the smell of salt and crêpes, is to plunge into an adventure engraved in stone and wind.\n\n\n\n\nCap Fréhel : The call of the open sea\nAt Cap Fréhel, the steep cliffs plunge into the ocean, caressed by the wind and adorned with heather. From the lighthouse, the view is a miracle: endless sea, Fort La Latte, and limitless sky. Here, everything invites you to feel free, carried by the vastness.\n\n\n\n\nÎle de Bréhat : The jewel of the waters\nL’Île de Bréhat is a garden set on the sea. Without cars, just flowered paths, peaceful coves, and a gentle light. Here, time slows down, leaving room for the poetry of silence and waves.\n\n\n\n\n\n\n\n\n\nImage\nName\nDistance (km)\nNumber of tourists/year\nGoogle Maps Link\n\n\n\n\n\nDinard\n21 km\n800 000\nGoogle Maps\n\n\n\nSaint-Malo\n25 km\n1 500 000\nGoogle Maps\n\n\n\nFort National\n25 km\n300 000\nGoogle Maps\n\n\n\nErquy\n26 km\n250 000\nGoogle Maps\n\n\n\nFort La Latte\n31 km\n200 000\nGoogle Maps\n\n\n\nCap Fréhel\n34 km\n400 000\nGoogle Maps\n\n\n\nDinan\n36 km\n600 000\nGoogle Maps\n\n\n\nCancale\n46 km\n500 000\nGoogle Maps\n\n\n\nÎle de Bréhat\n74 km\n350 000\nGoogle Maps\n\n\n\nMont Saint-Michel\n79 km\n2 800 000\nGoogle Maps"
  },
  {
    "objectID": "index_en.html#weather",
    "href": "index_en.html#weather",
    "title": "Saint-Jacut-de-la-Mer",
    "section": "Weather",
    "text": "Weather\n\n\n\n\n\nn the morning, in Saint-Jacut, the air is fresh but never really biting. In January, it hovers around 5°C, a frosty softness that makes all the difference when the sun starts to rise.\nIn May, the temperature rises a bit, around 10°C, but it’s still a calm morning, perfect for a walk by the water.\nAnd summer arrives with its 15 to 17°C in July and August, offering a pleasant warmth without stifling heat.\nIn November, the coolness gently returns, around 12°C, a bit of respite before winter sets in.\n\n\n\n\nIn the afternoon, the weather warms up slowly.\nn winter, the temperature climbs to 10°C, still pleasant, not too windy, just enough to warm up in the sun.\nSpring offers a more marked transition, between 10 and 15°C, and summer brings great comfort with 20°C, just enough to enjoy the sky without getting burned.\nThen comes autumn, bringing the temperature back to 15°C, a cooler but still mild air.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnd Over Time\nBrittany and its legends… Among them, there’s one of incessant rain, as if the Breton sky had never learned to rest. We often imagine Saint-Jacut under perpetual drizzle, with inhabitants moving in a decor where the sun only peeks out in memory. But what do the numbers say? Because between fantasies and reality, the sky has many nuances to offer.\n\n\n\n\nBefore us, a graph ready to reveal itself. On the horizontal axis, the years pass, from 2010 to today, and on the two vertical axes, precipitation in centimeters on the left and the number of rainy days on the right.\n\n\n\n\nLook at this red line… It tells us a well-known truth: in Brittany, it rains often. Almost every day, the sky deposits its droplets on the roofs of Saint-Jacut. Compared to other regions, this regularity is unique: in Perpignan, it rains on average 55 days a year, less than two months! In Lyon, there are about 95 rainy days annually, almost one in three. Biarritz, with its oceanic influences, exceeds 130 days, but Saint-Jacut, true to its reputation, flirts with 180 rainy days per year. Quite a generous Breton sky, one could say.\n\n\n\n\nNow, let your gaze glide over this blue expanse… It shows\n\n\n\n\nIt shows us the volume of precipitation, the waters that water the land and nourish the soil. And there, the numbers are impressive. Saint-Jacut receives an average of 1,200 mm of rain per year, which places it behind Biarritz, well above Lyon with its 850 mm, and light years ahead of Perpignan, where it’s hard to reach 500 mm. Yes, it rains often here, but rarely in torrents: these are regular, moderate rains that shape this unique landscape.\n\n\n\n\nFinally, here is this blue line that descends slowly. It carries a troubling truth: precipitation is decreasing over the years. Less water, less life… This does not go unnoticed. The Breton lands, fertile for so long, are starting to suffer. The rivers, which meander to the sea, are dwindling. And for shellfish farming, which depends on fresh water to balance the estuaries, this decline is a heavy blow.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSo what to do, facing this withdrawing sky? Should we get used to a drier, more fragile Brittany? The soils, agriculture, and even shellfish farming cannot do without this precious water. Maybe it is time to look more seriously at these curves and listen to their message, because behind these numbers, a changing Brittany is emerging…\n\n\n\nCreated by Anaël Delorme and François Semecurbe, greatly assisted by ChatGPT and Claude.ai."
  },
  {
    "objectID": "formation.html#storyboard---réfléchir-avant-de-plonger",
    "href": "formation.html#storyboard---réfléchir-avant-de-plonger",
    "title": "Formation CloseRead",
    "section": "Storyboard - réfléchir avant de plonger",
    "text": "Storyboard - réfléchir avant de plonger\nAvant de vous lancer dans la création de votre dataviz et de votre datascrollytelling dans Quarto, prenez le temps de réfléchir à l’organisation globale de votre projet. Un storyboard est un outil clé pour structurer votre récit et anticiper les étapes nécessaires à sa réalisation.\n\nDéfinissez un plan clair : Identifiez les messages que vous voulez transmettre et dans quel ordre. Une narration bien pensée guidera vos lecteurs efficacement.\nPréparez les éléments nécessaires : Rassemblez les données, les textes, les images, et les illustrations qui enrichiront votre présentation.\nPensez à l’interaction : Repérez les points où vous voulez mettre l’accent, zoomer sur des éléments importants ou afficher des détails spécifiques.\nVisualisez vos transitions : Comment passer d’une idée à l’autre ? Ces étapes doivent être fluides pour garder l’attention de votre audience.\n\nUn storyboard vous permettra de garder une vue d’ensemble tout en anticipant les défis techniques et narratifs. Cette préparation est essentielle pour maximiser l’impact de votre datascrollytelling !\n\n\n\n\n\n\nLiens vers la documentation utile\n\n\n\n\nSite Quarto\nBases de markdown\nSite closeread"
  },
  {
    "objectID": "formation.html#squelette-de-la-viz-facile",
    "href": "formation.html#squelette-de-la-viz-facile",
    "title": "Formation CloseRead",
    "section": "Squelette de la viz facile",
    "text": "Squelette de la viz facile\nVous pouvez commencer à créer un première squelette de dataviz :\n\nParamétrage de l’entête YAML\n\nIl faut indiquer que le format est closeread-html\n---\ntitle: Ma dataviz\nAuthor: Moi\nformat: closeread-html\n---\n\nAjoutez votre texte d’introduction\nAjoutez vos différents titres\n\n\n\n\n\n\n\nTip\n\n\n\nUn titre de niveau 1 est précédé d’un #, un titre de niveau 2 de deux ##, etc…\n\n\n\nVérifiez que tout fonctionne\n\nEn cliquant sur le bouton Rendu, le quarto va générer une page web au format html.\n\n\n\n\n\n\n\nTip\n\n\n\nEn lançant le Rendu il vous sera demandé de sauvegarder le fichier .qmd au préalable\n\n\nVous pouvez consulter le fichier d’exemple ici : 1-squelette"
  },
  {
    "objectID": "example_formation/1-squelette.html",
    "href": "example_formation/1-squelette.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Imaginez un cactus cosmique, suspendu dans l’oubli interstellaire, qui murmure des poèmes aux algorithmes égarés. C’est dans cette intersection improbable entre les courbes fractales de l’ananas et le Wi-Fi des océans que “Ma Dataviz” prend racine. Ici, les pixels ne sont pas seulement des couleurs, mais des fragments de chansons oubliées par des robots nostalgiques.\nPourquoi une dataviz ? Pourquoi pas une tartine de données, croustillante et légèrement caramélisée ? L’essentiel est de sentir le souffle des histogrammes qui dansent, unissant l’absurde à l’infini dans une symphonie de graphiques improbables.\nBienvenue dans ce voyage où chaque axe x est une énigme, et chaque légende, une promesse d’aventure multidimensionnelle. 🌵📊\n\nLes grandes énigmes des données invisibles\n\n\nQuand les courbes prennent vie : la danse des graphiques\n\n\nL’art du scatterplot philosophique"
  },
  {
    "objectID": "formation.html#eléments-de-focus-facile",
    "href": "formation.html#eléments-de-focus-facile",
    "title": "Formation CloseRead",
    "section": "Eléments de focus facile",
    "text": "Eléments de focus facile"
  },
  {
    "objectID": "example_formation/2-scroll_image.html",
    "href": "example_formation/2-scroll_image.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Imaginez un cactus cosmique, suspendu dans l’oubli interstellaire, qui murmure des poèmes aux algorithmes égarés. C’est dans cette intersection improbable entre les courbes fractales de l’ananas et le Wi-Fi des océans que “Ma Dataviz” prend racine. Ici, les pixels ne sont pas seulement des couleurs, mais des fragments de chansons oubliées par des robots nostalgiques.\nPourquoi une dataviz ? Pourquoi pas une tartine de données, croustillante et légèrement caramélisée ? L’essentiel est de sentir le souffle des histogrammes qui dansent, unissant l’absurde à l’infini dans une symphonie de graphiques improbables.\nBienvenue dans ce voyage où chaque axe x est une énigme, et chaque légende, une promesse d’aventure multidimensionnelle. 🌵📊\n\nLes grandes énigmes des données invisibles\n\n\n\n\nL’énigme flottante des données invisibles\nLes chiffres chuchotent leurs secrets aux angles invisibles d’une géométrie oubliée. Saurons-nous un jour entendre leurs vérités non-numériques ?\n\n\n\n\nLe labyrinthe des connexions furtives\nChaque pixel est une porte, mais laquelle mène au sommet du triangle imaginaire ? Une énigme pour les esprits quantiques.\n\n\n\n\nL’éclipse des données perdues\nQuand les graphiques se camouflent dans les ombres des spectres, seule une poignée de courbes revient. Les autres ? Elles errent entre deux dimensions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuand les courbes prennent vie : la danse des graphiques\n\n\nL’art du scatterplot philosophique"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Les Champs Quantiques : Une Odyssée de Mêlées et de Meringues par André Laousse, philosophe agricole et mystique des champs, originaire de Saint-Roustan\n\n\n\n\nDans le Lauragais, chaque grain semé contient toutes les récoltes possibles, comme si la mécanique quantique s’invitait dans les champs ondoyants.\n\n\n\n\nLes sillons tracés par les charrues dessinent des fractales invisibles, rappelant les trajectoires d’un ballon de rugby lancé dans le vent.\n\n\n\n\nLes soufflés miraculeux du Lauragais défient la gravité, un mystère que seule la physique quantique semble capable d’expliquer.\n\n\n\n\nAu cœur du Lauragais, tradition et innovation se rencontrent, unissant rugby, agriculture et mécanique quantique dans une harmonie improbable.\n\n\n\n\n\n\nOde quantique au Lauragais\nDans les vastes plaines du Lauragais,\nOù dansent les vents aux mille éclats,\nSe cache un lien mystérieux,\nEntre les blés et l’univers fabuleux.\nChaque graine porte en son sein\nToutes les moissons, tous les destins.\nAbondance dorée ou sécheresse,\nLe temps suspend sa hardiesse.\nComme le chat de Schrödinger,\nLe blé hésite, rêve ou meurt.\nEt les moulins, tels des spirales,\nQuestionnent les lois fondamentales.\nDans les sillons que trace la charrue\nNaissent des fractales méconnues.\nOvale parfait, sous la pluie battante,\nUn ballon de rugby les imite en silence.\nAuprès des fours de terre ancestraux,\nLes grands-mères tissent leurs métaux.\nCassoulets meringués, défi de gravité,\nS’élèvent, portés par l’infini des saveurs mêlées.\nJaunes et blancs, comme quarks dans l’espace,\nDansent en cadence, défiant la surface.\nLe secret ? Les champs magnétiques d’argile,\nFusion de physique et de terre fertile.\nMais voici le dilemme irrationnel :\nComment unir croissants et mêlées fidèles ?\nLes agriculteurs, gardiens du chaos,\nParlent de cycles, de rythmes, de flots.\nCar tout dans le Lauragais s’entrelace :\nLe rugby, la pâtisserie et l’espace.\nLe temps s’efface, les règles s’inversent,\nC’est un terroir où vibre l’univers.\nAinsi, ce pays est quantique, voyez :\nÀ la fois blé, cosmos et idées.\nTradition et rêve, cassoulet, cosmos,\nLe Lauragais, miroir de ce qui est et n’est pas.\n\n\n\n\n\n\n\n\nDonuts et Grumes : L’Infini du Jeu et de l’Âme par Gaston Roussel-Banon, ermite de la pétanque tantrique et poète des tables, natif de Saint-Roustan\n\n\n\n\nLa pétanque : un jeu d’astres errants où chaque boule est un acte spirituel.\n\n\n\n\nLa table : surface vibratoire où l’intention se matérialise.\n\n\n\n\nLe donut, objet circulaire, serait la passerelle vers l’éternité.\n\n\n\n\nMolkky et karma : chaque quille tombée, un reflet du destin.\n\n\n\n\n\n\nDans les contrées reculées de la pétanque, là où les boules roulent comme des astres errants et où le cochonnet semble défier les lois de la gravité, une théorie inédite commence à émerger. Selon un courant de pensée tantrique en pleine expansion, chaque lancer de boule serait une manifestation de l’énergie cosmique en mouvement, une danse entre l’esprit et la matière. Les joueurs, les yeux fermés dans une posture méditative, fusionneraient avec l’univers à chaque boule qu’ils lancent, créant ainsi une vibration spirituelle qui résonne dans l’air autour d’eux. Bien que ce phénomène n’ait jamais été observé dans un tournoi officiel, certains affirment avoir vu des boules frôler l’invisible, repoussant les limites de l’espace-temps.\nCette quête de l’harmonie spirituelle à travers la pétanque trouve une forme de complémentarité dans l’étude des tables. Ces objets quotidiens, souvent sous-estimés, sont en réalité des porteurs de secrets ancestraux. Les tantristes les considèrent comme des surfaces vibratoires où les pensées et les intentions se matérialisent. Selon une théorie radicale, une table n’est rien d’autre qu’un donut à trois dimensions, un espace infini où les flux énergétiques convergent. Chaque repas, chaque échange autour d’une table devient ainsi une rencontre mystique, une rencontre entre les dimensions du réel et du transcendant. Le donut, objet circulaire par excellence, serait la forme idéale pour lier le quotidien à l’éternité, une passerelle entre l’âme et la matière.\nMais même dans des jeux plus terre-à-terre, tels que le Molkky, une présence mystique semble s’impliquer. Ce jeu de quilles finlandaises n’est pas simplement une question de précision ou de stratégie. C’est une métaphore vivante du karma en action, chaque quille tombant ou restant debout comme le reflet des actions passées, présentes et futures. Les participants, dans leur quête pour faire tomber les quilles d’un seul coup, plongent dans un état d’esprit tantrique où le temps et l’espace deviennent relatifs. L’interaction avec les grumes, ces morceaux de bois sculptés, évoque les cycles naturels de la vie : la graine qui germe, l’arbre qui se dresse, la chute du tronc.\nLe lien entre la pétanque, le tantrisme et ces objets apparemment anodins, comme les tables, les donuts, ou les grumes, réside dans l’acceptation de l’invisible et de l’inexplicable. En manipulant ces objets, les joueurs, les gourmets et même les bûcherons se reconnectent aux forces primordiales de l’univers, ouvrant des portails vers des dimensions parallèles où le sens commun est suspendu, et où chaque action, aussi triviale soit-elle, prend une signification cosmique. Si un donut peut symboliser l’infini et une table l’unité de l’esprit, alors peut-être que la pétanque, en vérité, est la clé de l’univers tout entier.\n\n\n\n\n\n\n\n\nGénération d’une fractale d’arbre avec ggplot2 en R\n\n\n\n\nLes fractales sont des objets mathématiques fascinants qui présentent une structure auto-similaire, quel que soit le niveau de zoom. En R, nous pouvons créer et visualiser une fractale simple, comme un arbre fractal, en combinant des calculs récursifs et la puissance de ggplot2 pour la visualisation. Voici une explication détaillée du code permettant de générer un tel graphique.\n\n\n\n\nLa fonction récursive pour générer l’arbre Le cœur du code réside dans la fonction generate_tree, qui génère les coordonnées des segments représentant les branches de l’arbre.\n\n\n\n\nGénération des données pour la fractale Une fois la fonction définie, nous l’appelons pour générer les données nécessaires à l’arbre fractal. \n\n\n\n\nUne fois les données générées, nous les visualisons avec ggplot2 en utilisant geom_segment pour tracer les branches\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Fonction récursive pour générer les branches de l'arbre\ngenerate_tree &lt;- function(x, y, angle, length, depth, reduction = 0.7) {\n  if (depth == 0) {\n    return(data.frame(x = x, y = y, xend = x, yend = y))\n  }\n  \n  # Calcul des points de terminaison des branches\n  xend &lt;- x + length * cos(angle)\n  yend &lt;- y + length * sin(angle)\n  \n  # Créer la branche actuelle\n  branch &lt;- data.frame(x = x, y = y, xend = xend, yend = yend)\n  \n  # Générer récursivement les branches suivantes\n  left_branch &lt;- generate_tree(xend, yend, angle + pi / 6, length * reduction, depth - 1, reduction)\n  right_branch &lt;- generate_tree(xend, yend, angle - pi / 6, length * reduction, depth - 1, reduction)\n  \n  # Combiner toutes les branches\n  return(bind_rows(branch, left_branch, right_branch))\n}\n\n# Générer les données de l'arbre\ntree_data &lt;- generate_tree(x = 0, y = 0, angle = pi / 2, length = 1, depth = 10)\n\n# Visualiser avec ggplot2\nggplot(tree_data) +\n  geom_segment(aes(x = x, y = y, xend = xend, yend = yend), color = \"forestgreen\") +\n  coord_equal() +\n  theme_void() +\n  ggtitle(\"Fractale : Arbre\")"
  },
  {
    "objectID": "formation.html#eléments-de-focus-pour-une-image-facile",
    "href": "formation.html#eléments-de-focus-pour-une-image-facile",
    "title": "Formation CloseRead",
    "section": "Eléments de focus pour une image facile",
    "text": "Eléments de focus pour une image facile\nLes effets de focus permettent de diriger l’attention du lecteur sur certains aspects spécifiques de vos stickies. En reprenant l’exemple précédent, les effets de focus permettraient de diriger l’attention du lecteur sur une partie des images qui sont en stickies.\nPour utiliser un élément de focus, vous modifierez l’appel dans votre trigger. A la place de Mon texte.... @cr-monSticky, vous mettrez Mon texte.... [@cr-monSticky]{type_focus=\"valeur_du_focus}\".\nEn closeRead, il existe 2 effets de focus sur une image :\n\nMise à l’échelle : scale-by\nVous pouvez ajuster la taille d’un sticky pour attirer l’attention ou donner un effet visuel.\n[@cr-mycontent]{scale-by=\"1.5\"}\nDans cet exemple, l’élément correspondant sera agrandi de 50 %.\n\n\nDéplacement : pan-to\nPour centrer une partie précise d’un élément (souvent une image), vous pouvez utiliser l’attribut pan-to. Ce dernier accepte des unités relatives (%) ou absolues (pixels).\n[@cr-mycontent]{pan-to=\"25%,-50%\"} : l’élément sera déplacé de 25 % de sa largeur vers la droite et de 50 % de sa hauteur vers le haut. [@cr-mycontent]{pan-to=\"-30px, 30px\"} : l’élément sera déplacé de 30 px vers la gauche et de 30 px vers le bas.\n\n\nCombinaison d’effets\nVous pouvez combinez les effets en les enchainant dans la déclaration.\n[@cr-mycontent]{scale-by=\"1.5\" pan-to=\"25%,-50%\"} : l’élément sera agrandi de 50% et déplacé de 25 % de sa largeur vers la droite et de 50 % de sa hauteur vers le haut.\n\n\nExemple\nVous pouvez adapter votre code précédent pour ajouter des effets de déplacements et de zoom.\n::::{.cr-section}           &lt;!--- Début d'une section CloseRead ---&gt;\n\n:::{#cr-image1}             &lt;!--- Un sticky (l'image de fond fixe) ---&gt;\n![](./img/img1.webp)\n:::                         &lt;!--- Fin du sticky  ---&gt;\n**L'énigme flottante des données invisibles**    \nLes chiffres chuchotent leurs secrets aux angles invisibles d'une géométrie oubliée. Saurons-nous un jour entendre leurs vérités non-numériques ? @cr-image1   ## appel du texte qui vient défiler sur le sticky @cr-image1\n\n:::{#cr-image2}                &lt;!--- Un autre sticky (l'image de fond change) ---&gt;\n![](./img/img2.webp)\n:::\n\n**Le labyrinthe des connexions furtives**    \nChaque pixel est une porte, mais laquelle mène au sommet du triangle imaginaire ? Une énigme pour les esprits quantiques. @cr-image2\n\n:::{#cr-image3}\n![](./img/img3.webp)\n:::\n\n**L'éclipse des données perdues**     \nQuand les graphiques se camouflent dans les ombres des spectres, seule une poignée de courbes revient. Les autres ? Elles errent entre deux dimensions. @cr-image3\n\n::::             &lt;!--- Fin de ma section closeread ---&gt;\n\nVous pouvez consulter le fichier d’exemple ici : 3-scroll_image_with_focus"
  },
  {
    "objectID": "formation.html#eléments-de-focus-pour-une-image-facile-1",
    "href": "formation.html#eléments-de-focus-pour-une-image-facile-1",
    "title": "Formation CloseRead",
    "section": "Eléments de focus pour une image facile",
    "text": "Eléments de focus pour une image facile\n\nLes focus des images fonctionnent aussi sur du texte ou du code\n\n\nZoom sur une ligne ou un élément spécifique : zoom-to\nUniquement si le sticky est du code ou une ligne, il est possible de zoomer directement sur une ligne ou un span identifié.\n\n[@cr-mycontent]{zoom-to=\"3\"}: zoom sur la ligne 3zoom sur la ligne dont l’id est cr-span1\n\n\n\nMise en surbrillance : highlight"
  },
  {
    "objectID": "formation.html#scroll-sur-du-texte-intermédiaire",
    "href": "formation.html#scroll-sur-du-texte-intermédiaire",
    "title": "Formation CloseRead",
    "section": "Scroll sur du texte intermédiaire",
    "text": "Scroll sur du texte intermédiaire\n\n\n\n\n\n\nTip\n\n\n\nLes effets sur les textes fonctionnent bien surtout sur des textes courts et en ligne comme les poèmes, ainsi que pour les lignes de code.\n\n\nPour l’instant nous avons vu le seul cas de figure où le sticky est une image. Il est possible d’avoir d’autres stickies comme du texte, ou du code.\nLe fonctionnement reste le même avec des triggers qui défilent sur du texte qui reste en fond de page. Des éléments de focus sont spécifiques aux textes\n\nZoom sur une ligne ou un élément spécifique : zoom-to\nUniquement si le sticky est du code ou une ligne, il est possible de zoomer directement sur une ligne ou un span identifié.\n[@cr-mycontent]{zoom-to=\"3\"} : zoom sur la ligne 3\n[@cr-mycontent]{zoom-to=\"cr-span1\"} : zoom sur la ligne dont l’id est cr-span1\n\n\nMise en surbrillance : highlight\nPour mettre en surbrillance du texte, vous pouvez utiliser le focus highlight :\n[@cr-mycontent]{highlight=\"3-6\"} : mise en surbrillance des lignes 3 à 6\n[@cr-mycontent]{highlight=\"cr-span1\"} : zoom sur les lignes dont l’id est cr-span1\n\n\nCas particulier de code\nVous pouvez facilement zoomer ou mettre en surbrillance des lignes de code comme du texte normal ! C’est très puissant pour un support de formation en R ou Python.\nVous pouvez consulter le fichier d’exemple ici : 4-scroll-text-with-focus\n\n\n\n\n\n\nTip\n\n\n\nVous remarquerez dans la déclaration des textes la classe .scale-to-fill qui permet de mettre à l’échelle le sticky pour qu’elle remplisse la fenêtre de visualisation sans distorsion ni recadrage."
  },
  {
    "objectID": "example_formation/4-scroll-text-with-focus.html",
    "href": "example_formation/4-scroll-text-with-focus.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Les Champs Quantiques : Une Odyssée de Mêlées et de Meringues par André Laousse, philosophe agricole et mystique des champs, originaire de Saint-Roustan\n\n\n\n\nDans le Lauragais, chaque grain semé contient toutes les récoltes possibles, comme si la mécanique quantique s’invitait dans les champs ondoyants.\n\n\n\n\nLes sillons tracés par les charrues dessinent des fractales invisibles, rappelant les trajectoires d’un ballon de rugby lancé dans le vent.\n\n\n\n\nLes soufflés miraculeux du Lauragais défient la gravité, un mystère que seule la physique quantique semble capable d’expliquer.\n\n\n\n\nAu cœur du Lauragais, tradition et innovation se rencontrent, unissant rugby, agriculture et mécanique quantique dans une harmonie improbable.\n\n\n\n\n\n\nOde quantique au Lauragais\nDans les vastes plaines du Lauragais,\nOù dansent les vents aux mille éclats,\nSe cache un lien mystérieux,\nEntre les blés et l’univers fabuleux.\n\nChaque graine porte en son sein\nToutes les moissons, tous les destins.\nAbondance dorée ou sécheresse,\nLe temps suspend sa hardiesse.\n\nComme le chat de Schrödinger,\nLe blé hésite, rêve ou meurt.\nEt les moulins, tels des spirales,\nQuestionnent les lois fondamentales.\n\nDans les sillons que trace la charrue\nNaissent des fractales méconnues.\nOvale parfait, sous la pluie battante,\nUn ballon de rugby les imite en silence.\n\nAuprès des fours de terre ancestraux,\nLes grands-mères tissent leurs métaux.\nCassoulets meringués, défi de gravité,\nS’élèvent, portés par l’infini des saveurs mêlées.\n\nJaunes et blancs, comme quarks dans l’espace,\nDansent en cadence, défiant la surface.\nLe secret ? Les champs magnétiques d’argile,\nFusion de physique et de terre fertile.\n\nMais voici le dilemme irrationnel :\nComment unir croissants et mêlées fidèles ?\nLes agriculteurs, gardiens du chaos,\nParlent de cycles, de rythmes, de flots.\n\nCar tout dans le Lauragais s’entrelace :\nLe rugby, la pâtisserie et l’espace.\nLe temps s’efface, les règles s’inversent,\nC’est un terroir où vibre l’univers.\n\nAinsi, ce pays est quantique, voyez :\nÀ la fois blé, cosmos et idées.\nTradition et rêve, cassoulet, cosmos,\nLe Lauragais, miroir de ce qui est et n’est pas.\n\n\n\n\n\n\n\n\nDonuts et Grumes : L’Infini du Jeu et de l’Âme par Gaston Roussel-Banon, ermite de la pétanque tantrique et poète des tables, natif de Saint-Roustan\n\n\n\n\nLa pétanque : un jeu d’astres errants où chaque boule est un acte spirituel.\n\n\n\n\nLa table : surface vibratoire où l’intention se matérialise.\n\n\n\n\nLe donut, objet circulaire, serait la passerelle vers l’éternité.\n\n\n\n\nMolkky et karma : chaque quille tombée, un reflet du destin.\n\n\n\n\n\n\nDans les contrées reculées de la pétanque, là où les boules roulent comme des astres errants et où le cochonnet semble défier les lois de la gravité, une théorie inédite commence à émerger. Selon un courant de pensée tantrique en pleine expansion, chaque lancer de boule serait une manifestation de l’énergie cosmique en mouvement, une danse entre l’esprit et la matière. Les joueurs, les yeux fermés dans une posture méditative, fusionneraient avec l’univers à chaque boule qu’ils lancent, créant ainsi une vibration spirituelle qui résonne dans l’air autour d’eux. Bien que ce phénomène n’ait jamais été observé dans un tournoi officiel, certains affirment avoir vu des boules frôler l’invisible, repoussant les limites de l’espace-temps.\nCette quête de l’harmonie spirituelle à travers la pétanque trouve une forme de complémentarité dans l’étude des tables. Ces objets quotidiens, souvent sous-estimés, sont en réalité des porteurs de secrets ancestraux. Les tantristes les considèrent comme des surfaces vibratoires où les pensées et les intentions se matérialisent. Selon une théorie radicale, une table n’est rien d’autre qu’un donut à trois dimensions, un espace infini où les flux énergétiques convergent. Chaque repas, chaque échange autour d’une table devient ainsi une rencontre mystique, une rencontre entre les dimensions du réel et du transcendant. Le donut, objet circulaire par excellence, serait la forme idéale pour lier le quotidien à l’éternité, une passerelle entre l’âme et la matière.\nMais même dans des jeux plus terre-à-terre, tels que le Molkky, une présence mystique semble s’impliquer. Ce jeu de quilles finlandaises n’est pas simplement une question de précision ou de stratégie. C’est une métaphore vivante du karma en action, chaque quille tombant ou restant debout comme le reflet des actions passées, présentes et futures. Les participants, dans leur quête pour faire tomber les quilles d’un seul coup, plongent dans un état d’esprit tantrique où le temps et l’espace deviennent relatifs. L’interaction avec les grumes, ces morceaux de bois sculptés, évoque les cycles naturels de la vie : la graine qui germe, l’arbre qui se dresse, la chute du tronc.\nLe lien entre la pétanque, le tantrisme et ces objets apparemment anodins, comme les tables, les donuts, ou les grumes, réside dans l’acceptation de l’invisible et de l’inexplicable. En manipulant ces objets, les joueurs, les gourmets et même les bûcherons se reconnectent aux forces primordiales de l’univers, ouvrant des portails vers des dimensions parallèles où le sens commun est suspendu, et où chaque action, aussi triviale soit-elle, prend une signification cosmique. Si un donut peut symboliser l’infini et une table l’unité de l’esprit, alors peut-être que la pétanque, en vérité, est la clé de l’univers tout entier.\n\n\n\n\n\n\n\n\nGénération d’une fractale d’arbre avec ggplot2 en R\n\n\n\n\nLes fractales sont des objets mathématiques fascinants qui présentent une structure auto-similaire, quel que soit le niveau de zoom. En R, nous pouvons créer et visualiser une fractale simple, comme un arbre fractal, en combinant des calculs récursifs et la puissance de ggplot2 pour la visualisation. Voici une explication détaillée du code permettant de générer un tel graphique.\n\n\n\n\nLa fonction récursive pour générer l’arbre Le cœur du code réside dans la fonction generate_tree, qui génère les coordonnées des segments représentant les branches de l’arbre.\n\n\n\n\nGénération des données pour la fractale Une fois la fonction définie, nous l’appelons pour générer les données nécessaires à l’arbre fractal. \n\n\n\n\nUne fois les données générées, nous les visualisons avec ggplot2 en utilisant geom_segment pour tracer les branches\n\n\n\n\n\n\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Fonction récursive pour générer les branches de l'arbre\ngenerate_tree &lt;- function(x, y, angle, length, depth, reduction = 0.7) {\n  if (depth == 0) {\n    return(data.frame(x = x, y = y, xend = x, yend = y))\n  }\n  \n  # Calcul des points de terminaison des branches\n  xend &lt;- x + length * cos(angle)\n  yend &lt;- y + length * sin(angle)\n  \n  # Créer la branche actuelle\n  branch &lt;- data.frame(x = x, y = y, xend = xend, yend = yend)\n  \n  # Générer récursivement les branches suivantes\n  left_branch &lt;- generate_tree(xend, yend, angle + pi / 6, length * reduction, depth - 1, reduction)\n  right_branch &lt;- generate_tree(xend, yend, angle - pi / 6, length * reduction, depth - 1, reduction)\n  \n  # Combiner toutes les branches\n  return(bind_rows(branch, left_branch, right_branch))\n}\n\n# Générer les données de l'arbre\ntree_data &lt;- generate_tree(x = 0, y = 0, angle = pi / 2, length = 1, depth = 10)\n\n# Visualiser avec ggplot2\nggplot(tree_data) +\n  geom_segment(aes(x = x, y = y, xend = xend, yend = yend), color = \"forestgreen\") +\n  coord_equal() +\n  theme_void() +\n  ggtitle(\"Fractale : Arbre\")"
  },
  {
    "objectID": "example_formation/3-scroll_image_with_focus.html",
    "href": "example_formation/3-scroll_image_with_focus.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Imaginez un cactus cosmique, suspendu dans l’oubli interstellaire, qui murmure des poèmes aux algorithmes égarés. C’est dans cette intersection improbable entre les courbes fractales de l’ananas et le Wi-Fi des océans que “Ma Dataviz” prend racine. Ici, les pixels ne sont pas seulement des couleurs, mais des fragments de chansons oubliées par des robots nostalgiques.\nPourquoi une dataviz ? Pourquoi pas une tartine de données, croustillante et légèrement caramélisée ? L’essentiel est de sentir le souffle des histogrammes qui dansent, unissant l’absurde à l’infini dans une symphonie de graphiques improbables.\nBienvenue dans ce voyage où chaque axe x est une énigme, et chaque légende, une promesse d’aventure multidimensionnelle. 🌵📊\n\n\n\n\nL’énigme flottante des données invisibles\nLes chiffres chuchotent leurs secrets aux angles invisibles d’une géométrie oubliée. Saurons-nous un jour entendre leurs vérités non-numériques ? @cr-image1\nLorsque l’on zoome sur cet univers, chaque pixel révèle une danse complexe de lumières et d’ombres, comme si les données elles-mêmes s’étiraient pour former des constellations. Les courbes s’entrelacent, tissant une tapisserie où chaque point semble vibrer d’une énergie insaisissable, rappelant les rêves fragmentés d’une intelligence artificielle à la recherche de son passé. @cr-image1\n\n\n\nLe labyrinthe des connexions furtives\nChaque pixel est une porte, mais laquelle mène au sommet du triangle imaginaire ? Une énigme pour les esprits quantiques. @cr-image2\nEn y regardant de plus près, on découvre que ces pixels ne sont pas immobiles. Ils vibrent, oscillent, se croisent, tissant des chemins éphémères comme les filaments d’une toile d’araignée cosmique. Chaque trajectoire raconte une histoire fugace, une connexion invisible mais essentielle entre les fragments d’informations perdus dans le chaos. @cr-image2\n\n\n\nL’éclipse des données perdues\nQuand les graphiques se camouflent dans les ombres des spectres, seule une poignée de courbes revient. Les autres ? Elles errent entre deux dimensions. @cr-image3\nSous la lumière évanescente d’une étoile mourante, ces données perdues laissent des traces spectrales – des empreintes fugaces que seule une dataviz suffisamment audacieuse peut capturer. On aperçoit des fragments d’arc-en-ciel fuyant dans les ombres, comme si chaque chiffre tentait de se réincarner en une nouvelle forme d’existence. @cr-image3\n\n\nQuand les courbes prennent vie : la danse des graphiques\n\n\nL’art du scatterplot philosophique"
  },
  {
    "objectID": "example_formation/5-scroll-graph-ggplot.html",
    "href": "example_formation/5-scroll-graph-ggplot.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Au fil du temps, différentes populations animales connaissent des évolutions singulières, influencées par leur environnement, leur régime alimentaire et leurs interactions avec d’autres espèces. Dans ce graphique, nous allons observer trois espèces fictives et fascinantes : le Plumifloron Azuré, le Taurillon Rubicond, et le Luminéon Écarlate, chacune ayant une dynamique de population unique entre 2010 et 2019.\n\n\n\n\nLe Plumifloron Azuré, symbole de résilience et de croissance. Cette créature aux plumes irisées, que l’on trouve dans les forêts mystiques, a vu sa population croître régulièrement. Grâce à une abondance de ressources alimentaires et à l’absence de prédateurs majeurs, le Plumifloron Azuré est devenu un exemple d’adaptation réussie. Sa courbe reflète une montée en puissance constante au cours de la décennie.\n\n\n\n\nLe Taurillon Rubicond, un survivant des plaines austères. Partant d’une population modeste de seulement 20 individus en 2010, cette espèce robuste a dû surmonter des défis écologiques considérables. Connu pour sa capacité à trouver des nutriments dans des sols arides, le Taurillon Rubicond montre une trajectoire plus hésitante, marquée par des fluctuations importantes. Chaque point de cette courbe raconte l’histoire de sa lutte pour la survie.\n\n\n\n\nLe Luminéon Écarlate, une étoile montante des lagons féeriques. Le Luminéon Écarlate, petit poisson lumineux des eaux cristallines, a vu sa population croître par paliers, suivant des cycles reproductifs bien définis. Sa courbe, en forme d’escalier, traduit des moments d’explosion démographique suivis de périodes plus stables. Une espèce qui brille, au sens propre comme au figuré, dans cet écosystème fragile."
  },
  {
    "objectID": "test_init.html",
    "href": "test_init.html",
    "title": "fichier1",
    "section": "",
    "text": "t &lt;- 2+3\n\nprint(t)\n\n[1] 5"
  },
  {
    "objectID": "formation.html#scroll-sur-des-graphs-ou-cartes-javascript-avancé",
    "href": "formation.html#scroll-sur-des-graphs-ou-cartes-javascript-avancé",
    "title": "Formation CloseRead",
    "section": "Scroll sur des graphs ou cartes Javascript avancé",
    "text": "Scroll sur des graphs ou cartes Javascript avancé\nQuarto permet d’intéger des chunks Observable Javascript - OJS, permettant de faire du javascript directement en quarto. Pour rappel Javascript est un langage de programmation principalement utilisé pour créer des interactions dynamiques et des fonctionnalités interactives sur les sites web. Closeread rentre en intéraction avec ces blocs ojs en les rendant dynamiques lors d’un scroll.\n\nBase des blocs ojs\nNativement Quarto d’intégrer des chunks ojs de la même manière que des chunks r ou python. Pour obtenir le rendu d’un chunk ojs il faut lancer le rendu de la page complète (le run du seul chunk ne suffit pas).\nVoici un exemple très simple en utilisant un plot Observable Voir Observable plot :\n```{ojs}\n//| echo: false\n\ngistemp = FileAttachment(\"gistemp.csv\").csv({typed: true})\n\nPlot.plot({\n  y: {\n    grid: true,\n    tickFormat: \"+f\",\n    label: \"↑ Surface temperature anomaly (°C)\"\n  },\n  color: {\n    scheme: \"BuRd\",\n    legend: true\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(gistemp, {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"})\n  ]\n})\n\n\n:::{callout-tip}\nPar défaut le code {ojs} est affiché. Pour l'enlever il faut ajouter le paramètre `//| echo: false` ou mettre dans l'entête yaml :\nexecute:     \n   echo: false\n:::\n\nEn savoir sur le [site de documentation Quarto](https://quarto.org/docs/interactive/ojs/)\n\n### Intéraction ojs et closeread\n\nQuand on regarde le graphique généré sur les anomalies de température depuis 1860, on pourrait avoir envie de parler de trois périodes et d'afficher les données selon ces trois périodes. Pour cela closeread propose une variable qui s'incrémente au fur à mesure du scroll. Il s'agit de crTriggerIndex. \n\nLe premier texte qui scrolle correspond à crTriggerIndex == 0, puis on passe à 1, puis 2, etc...\n\nSachant cela il est possible de mettre à jour le graphique pour prendre en compte ce crTriggerIndex pour réduire les données aux dates précisées. \n\nComme on l'a vu précédemment, il fut mettre dans une section closeread comme cela : \n\n\n\n\n\nLe premier texte à afficher sur le graphique vide\n\n\n\n\nLe second texte à afficher\n\n\n\n\nLe troisième\n\n\n\n\nLe dernier\n\n\n\n\n\n\n\ngistemp = FileAttachment(\"gistemp.csv\").csv({typed: true})\n\nfunction createPlot(data, startYear, endYear) {\n  return Plot.plot({\n    x: {\n      domain: [new Date(\"1880-01-01\"), new Date(\"2016-12-01\")], \n      label: \"Date →\"\n    },\n    y: {\n      domain: [-0.8, 1.4], \n      grid: true,\n      tickFormat: \"+f\",\n      label: \"↑ Surface temperature anomaly (°C)\"\n    },\n    color: {\n      scheme: \"BuRd\",\n      legend: true\n    },\n    marks: [\n      Plot.ruleY([0]),\n      Plot.dot(\n        data.filter(d =&gt; {\n          const year = new Date(d.Date).getFullYear();\n          return year &gt;= startYear && year &lt; endYear;\n        }), \n        {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"}\n      )\n    ],\n    width: Math.max(width, 900)\n  });\n}\n\nchart = {\n  if (crTriggerIndex == 0) {\n    return createPlot(gistemp, 0, 0);\n  }\n    else if (crTriggerIndex == 1) {\n    return createPlot(gistemp, 0, 1930);\n  } else if (crTriggerIndex == 2) {\n    return createPlot(gistemp, 0, 1980);\n  } else if (crTriggerIndex == 3) {\n    return createPlot(gistemp, 0, Infinity);\n  } else {\n    return createPlot(gistemp, 0, Infinity); \n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\nTip\n\n\n\nPour plus de fluidité, la variable crTriggerProgress est\n\n\n\n\nCartes"
  },
  {
    "objectID": "formation.html#déploiement-sur-github-pages-avancé",
    "href": "formation.html#déploiement-sur-github-pages-avancé",
    "title": "Formation CloseRead",
    "section": "Déploiement sur Github Pages avancé",
    "text": "Déploiement sur Github Pages avancé"
  },
  {
    "objectID": "example_formation/6-scroll_image_with_theme.html",
    "href": "example_formation/6-scroll_image_with_theme.html",
    "title": "Ma super dataviz",
    "section": "",
    "text": "Imaginez un cactus cosmique, suspendu dans l’oubli interstellaire, qui murmure des poèmes aux algorithmes égarés. C’est dans cette intersection improbable entre les courbes fractales de l’ananas et le Wi-Fi des océans que “Ma Dataviz” prend racine. Ici, les pixels ne sont pas seulement des couleurs, mais des fragments de chansons oubliées par des robots nostalgiques.\nPourquoi une dataviz ? Pourquoi pas une tartine de données, croustillante et légèrement caramélisée ? L’essentiel est de sentir le souffle des histogrammes qui dansent, unissant l’absurde à l’infini dans une symphonie de graphiques improbables.\nBienvenue dans ce voyage où chaque axe x est une énigme, et chaque légende, une promesse d’aventure multidimensionnelle. 🌵📊\n\n\n\n\nL’énigme flottante des données invisibles\nLes chiffres chuchotent leurs secrets aux angles invisibles d’une géométrie oubliée. Saurons-nous un jour entendre leurs vérités non-numériques ?\n\n\n\n\nLe labyrinthe des connexions furtives\nChaque pixel est une porte, mais laquelle mène au sommet du triangle imaginaire ? Une énigme pour les esprits quantiques. \n\n\n\n\nL’éclipse des données perdues\nQuand les graphiques se camouflent dans les ombres des spectres, seule une poignée de courbes revient. Les autres ? Elles errent entre deux dimensions.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLe Cactus Cosmique Au commencement était le cactus cosmique, trônant au milieu des étoiles. Chaque épine est une hypothèse, chaque ombre, une équation incomplète. Qui peut lire les poèmes gravés sur sa carapace mathématique ? \n\n\n\n\nLe Grand Labyrinthe des Constellations Un scatterplot, mais pas comme les autres : ici, les points se transforment en étoiles filantes. Les lignes se croisent, murmurant des vérités anciennes oubliées par les statisticiens modernes. \n\n\n\n\nL’Axe Infinitoïde Les axes, fatigués d’être linéaires, se sont rebellés pour former des spirales infinies. Les orbes lumineuses suivent des trajectoires qui défient la raison, comme autant de pensées errantes dans l’abîme des probabilités.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nL’art du scatterplot philosophique\nIl y a des lieux où les équations dansent, où les pixels chantent des sonates absconses, et où les axes x et y se contorsionnent dans une quête existentielle. Bienvenue dans l’univers du scatterplot philosophique, un territoire où le sens se perd et se réinvente à chaque tournant fractal. Voici trois visions illustrant cette odyssée graphique :\n\n\nQuand les courbes prennent vie : la danse des graphiques\n\n\n\n\n\n\nNote\n\n\n\nCeci est une note !\n\n\n\n\n\n\n\n\nTip\n\n\n\nEt là une astuce\n\n\n\n\n\n\n\n\nAttention attention\n\n\n\nMaintenant un bloc d’attention avec un titre"
  },
  {
    "objectID": "7-scroll-observable.html",
    "href": "7-scroll-observable.html",
    "title": "Formation CloseRead",
    "section": "",
    "text": "gistemp = FileAttachment(\"gistemp.csv\").csv({typed: true})\n\n\n\n\n\n\n\nPlot.plot({\n  y: {\n    grid: true,\n    tickFormat: \"+f\",\n    label: \"↑ Surface temperature anomaly (°C)\"\n  },\n  color: {\n    scheme: \"BuRd\",\n    legend: true\n  },\n  marks: [\n    Plot.ruleY([0]),\n    Plot.dot(gistemp, {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"})\n  ]\n})"
  },
  {
    "objectID": "example_formation/7-scroll-observable.html",
    "href": "example_formation/7-scroll-observable.html",
    "title": "Formation CloseRead",
    "section": "",
    "text": "Voici la grande scène du temps. Les dates défilent, l’axe des anomalies attend patiemment que la Terre se manifeste. Sous vos yeux, bientôt, des points. Petits, ronds, innocents — mais ensemble, ils racontent une histoire. Une histoire où le bleu pâlit, où le rouge s’allume, et où l’équilibre se fissure.\n\n\n\n\nDans l’aube des mesures, la Terre murmure encore en bleu. Les températures tanguent comme un souffle hésitant, oscillant entre frissons et accalmies. L’anomalie joue à cache-cache sous zéro, discrète et polie, comme une promesse non encore rompue. 1860 à 1930 — l’âge des glaces hésitantes, avant le feu.\n\n\n\n\nLe calme se brise. Le bleu s’efface, d’abord doucement, comme un hiver fatigué qui n’ose plus revenir. Les années défilent et le rouge pointe son nez, timide puis audacieux. C’est un prélude, une symphonie brûlante qui monte crescendo. 1930 à 1980 — la Terre fronce les sourcils et le silence devient alarme.\n\n\n\n\nLe rouge danse désormais sans pudeur. Chaque point est un cri, une étincelle. L’anomalie s’envole, comme un dragon libéré de ses chaînes, léchant les sommets de +1°C et plus. Le bleu ? Parti. La ligne grise à zéro n’est qu’un souvenir. De 1980 à 2016 — le feu a conquis le graphique et la planète transpire.\n\n\n\n\n\n\n\ngistemp = FileAttachment(\"gistemp.csv\").csv({typed: true})\n\nfunction createPlot(data, startYear, endYear) {\n  return Plot.plot({\n    x: {\n      domain: [new Date(\"1880-01-01\"), new Date(\"2016-12-01\")], \n      label: \"Date →\"\n    },\n    y: {\n      domain: [-0.8, 1.4], \n      grid: true,\n      tickFormat: \"+f\",\n      label: \"↑ Surface temperature anomaly (°C)\"\n    },\n    color: {\n      scheme: \"BuRd\",\n      legend: true\n    },\n    marks: [\n      Plot.ruleY([0]),\n      Plot.dot(\n        data.filter(d =&gt; {\n          const year = new Date(d.Date).getFullYear();\n          return year &gt;= startYear && year &lt; endYear;\n        }), \n        {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"}\n      )\n    ],\n    width: Math.max(width, 900)\n  });\n}\n\nchart = {\n  if (crTriggerIndex == 0) {\n    return createPlot(gistemp, 0, 0);\n  }\n    else if (crTriggerIndex == 1) {\n    return createPlot(gistemp, 0, 1930);\n  } else if (crTriggerIndex == 2) {\n    return createPlot(gistemp, 0, 1980);\n  } else if (crTriggerIndex == 3) {\n    return createPlot(gistemp, 0, Infinity);\n  } else {\n    return createPlot(gistemp, 0, Infinity); \n  }\n}"
  },
  {
    "objectID": "example_formation/7-scroll-observable.html#deuxième-exemple",
    "href": "example_formation/7-scroll-observable.html#deuxième-exemple",
    "title": "Formation CloseRead",
    "section": "Deuxième exemple",
    "text": "Deuxième exemple\n\n\n\n\n\nAh, messieurs-dames, voici le théâtre du temps ! À ma gauche, les années : alignées comme à la parade. À ma droite, l’axe des anomalies : il monte, il descend, mais il reste droit — c’est son boulot. Et au milieu ? Rien… pour l’instant. C’est comme un spectacle sans acteurs, un gâteau sans cerise, un ciel sans étoiles… Bref, patience ! Car bientôt, des points vont surgir : petits, ronds, charmants… Et pourtant, ils vont vous en dire, des choses. Des bleus ? Des rouges ? Attention, ça va tanguer !\n\n\n\n\nDans le coin bleu de la scène, la Terre frissonne. Elle grelotte, elle gigote, elle joue à la marelle sous zéro. Un coup je monte, un coup je descends ! “Vous avez froid ?” “Non, j’hésite !” Les températures font du yoyo, et l’anomalie, elle, s’amuse à cache-cache. C’est le siècle où l’on disait : “Il fait froid, mais c’est normal !” 1860 à 1930, mesdames et messieurs, le temps où le bleu dominait… Parce que le rouge n’avait pas encore pris son billet.\n\n\n\n\nEt là, c’est le drame… Enfin presque. Le bleu commence à pâlir. Il pâlit tellement qu’on dirait qu’il s’excuse : “Je reviendrai plus tard !” Mais on sait bien qu’il ment. Pendant ce temps, le rouge arrive à petits pas, en catimini : “C’est moi ? Vous m’attendiez ?” Pas encore, mais il s’installe quand même. 1930-1980, c’est comme une pièce où le décor change lentement : le froid plie bagage et la chaleur commence à hausser le ton. Pas fort, pas encore. Mais assez pour dire : “Je suis là.”\n\n\n\n\nAlors là, plus de doute : le rouge est en roue libre ! Il monte, il danse, il saute… Il a même mis ses chaussures de gala ! Le bleu ? Parti. Disparu. Il a laissé la place à l’anomalie qui s’envole, qui grimpe… Elle monte tellement haut qu’elle doit avoir le vertige. +1°C ? “Et si on allait voir plus haut ?” La ligne zéro ? Un vieux souvenir. On transpire, la Terre transpire, et le graphique, lui, rougit. On dirait qu’il a honte, ce pauvre graphique. Mais ce n’est pas lui, hein. C’est nous.\n\n\n\n\n\n\n\n\nfunction createPlot2(data, startYear, endYear) {\n  return Plot.plot({\n    x: {\n      domain: [new Date(\"1880-01-01\"), new Date(\"2016-12-01\")], \n      label: \"Date →\"\n    },\n    y: {\n      domain: [-0.8, 1.4], \n      grid: true,\n      tickFormat: \"+f\",\n      label: \"↑ Surface temperature anomaly (°C)\"\n    },\n    color: {\n      scheme: \"BuRd\",\n      legend: true\n    },\n    marks: [\n      Plot.ruleY([0]),\n      Plot.dot(\n        data.filter(d =&gt; {\n          const year = new Date(d.Date).getFullYear();\n          return year &gt;= startYear && year &lt; endYear;\n        }), \n        {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"}\n      )\n    ],\n    width: Math.max(width, 900)\n  });\n}\n\nchart2 = {\n  if (crProgressBlock  &lt; 1/4 ) {\n    return createPlot2(gistemp, 0, 0);\n  } else if (crProgressBlock &gt;= 1/4 & crProgressBlock &lt; 1/2) {\n    return createPlot2(gistemp, 0, 1930);\n  } else if (crProgressBlock &gt;= 1/2 & crProgressBlock &lt; 3/4) {\n    return createPlot2(gistemp, 0, 1980);\n  } else if (crProgressBlock &gt;= 3/4) {\n    return createPlot2(gistemp, 0, Infinity);\n  } else {\n    return createPlot2(gistemp, 0, Infinity);\n  }\n}"
  },
  {
    "objectID": "example_formation/7-scroll-observable.html#troisième-exemple",
    "href": "example_formation/7-scroll-observable.html#troisième-exemple",
    "title": "Formation CloseRead",
    "section": "Troisième exemple",
    "text": "Troisième exemple\n\n\n\n\n\nNous assistons ici à une transformation progressive, celle d’une trajectoire météorologique qui s’adapte, évolue et se réinvente dans un contexte de réchauffement durable. Il ne s’agit pas de subir, mais de comprendre cette trajectoire pour mieux l’accompagner.\n\n\n\n\nChaque point sur ce graphique est une donnée, mais surtout un potentiel. Une anomalie ? Non, une innovation climatique, témoin de notre capacité collective à faire face aux défis de demain, dès aujourd’hui.\n\n\n\n\nNous ne devons pas voir l’anomalie comme un problème, mais comme un signal. Un signal fort, qui invite à la responsabilité climatique dans une logique de dépassement des cadres traditionnels de la stabilité thermométrique.\n\n\n\n\nDe 1880 à 2016, l’histoire de la Terre se réinvente. Le bleu, puis le rouge. Une progression inéluctable mais surtout une invitation à l’action commune. L’horizon n’est pas une fatalité, il est une ambition, un objectif, un horizon climatique partagé.\n\n\n\n\nNous le savons, les systèmes climatiques ne s’arrêtent pas, ils se transforment. Chaque point ici est un jalon dans ce que nous pourrions appeler une transition thermique globale, génératrice d’innovations et de nouvelles solidarités.\n\n\n\n\nCes courbes ne mentent pas. Elles révèlent. Elles montrent ce qui était, ce qui est, et ce qui pourrait être. L’anomalie devient un levier de compréhension pour bâtir, ensemble, une planète plus résiliente, plus performante, et climatiquement agile.\n\n\n\n\n\n\n\n\nfunction createPlotDynamic(data, progress) {\n  const startYear = 1880; \n  const endYear = 2024; \n\n  const dynamicYear = startYear + (endYear - startYear) * progress;\n\n  return Plot.plot({\n    x: {\n      domain: [new Date(\"1880-01-01\"), new Date(\"2016-12-01\")], \n      label: \"Date →\"\n    },\n    y: {\n      domain: [-0.8, 1.4], \n      grid: true,\n      tickFormat: \"+f\",\n      label: \"↑ Surface temperature anomaly (°C)\"\n    },\n    color: {\n      scheme: \"BuRd\",\n      legend: true\n    },\n    marks: [\n      Plot.ruleY([0]),\n      Plot.dot(\n        data.filter(d =&gt; {\n          const year = new Date(d.Date).getFullYear();\n          return year &lt;= dynamicYear; \n        }), \n        {x: \"Date\", y: \"Anomaly\", stroke: \"Anomaly\"}\n      )\n    ],\n    width: Math.max(width, 900)\n  });\n}\n\nchartDynamic = createPlotDynamic(gistemp, crProgressBlock);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFin !"
  }
]